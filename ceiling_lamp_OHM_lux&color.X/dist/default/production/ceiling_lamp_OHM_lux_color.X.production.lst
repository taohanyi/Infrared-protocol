

Microchip Technology PIC LITE Macro Assembler V1.30 build 55553 
                                                                                               Tue Jul 08 08:47:09 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 55553
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     	;# 
    34  0001                     	;# 
    35  0002                     	;# 
    36  0003                     	;# 
    37  0004                     	;# 
    38  0005                     	;# 
    39  0006                     	;# 
    40  0007                     	;# 
    41  0008                     	;# 
    42  0009                     	;# 
    43  000A                     	;# 
    44  000B                     	;# 
    45  000C                     	;# 
    46  000E                     	;# 
    47  0011                     	;# 
    48  0012                     	;# 
    49  0013                     	;# 
    50  0015                     	;# 
    51  0016                     	;# 
    52  0016                     	;# 
    53  0017                     	;# 
    54  0018                     	;# 
    55  0019                     	;# 
    56  001A                     	;# 
    57  001B                     	;# 
    58  001C                     	;# 
    59  008C                     	;# 
    60  008E                     	;# 
    61  0091                     	;# 
    62  0092                     	;# 
    63  0093                     	;# 
    64  0095                     	;# 
    65  0096                     	;# 
    66  0097                     	;# 
    67  0099                     	;# 
    68  009A                     	;# 
    69  009B                     	;# 
    70  009B                     	;# 
    71  009C                     	;# 
    72  009D                     	;# 
    73  009E                     	;# 
    74  009F                     	;# 
    75  010C                     	;# 
    76  010E                     	;# 
    77  0111                     	;# 
    78  0112                     	;# 
    79  0113                     	;# 
    80  0114                     	;# 
    81  0115                     	;# 
    82  0116                     	;# 
    83  0117                     	;# 
    84  0118                     	;# 
    85  0119                     	;# 
    86  011D                     	;# 
    87  018C                     	;# 
    88  018E                     	;# 
    89  0191                     	;# 
    90  0191                     	;# 
    91  0192                     	;# 
    92  0193                     	;# 
    93  0193                     	;# 
    94  0194                     	;# 
    95  0195                     	;# 
    96  0196                     	;# 
    97  0197                     	;# 
    98  020C                     	;# 
    99  0211                     	;# 
   100  0211                     	;# 
   101  0212                     	;# 
   102  0212                     	;# 
   103  0213                     	;# 
   104  0213                     	;# 
   105  0214                     	;# 
   106  0214                     	;# 
   107  0215                     	;# 
   108  0215                     	;# 
   109  0215                     	;# 
   110  0216                     	;# 
   111  0216                     	;# 
   112  0217                     	;# 
   113  0217                     	;# 
   114  0391                     	;# 
   115  0392                     	;# 
   116  0393                     	;# 
   117  0498                     	;# 
   118  0498                     	;# 
   119  0499                     	;# 
   120  049A                     	;# 
   121  049B                     	;# 
   122  049B                     	;# 
   123  049C                     	;# 
   124  049E                     	;# 
   125  049F                     	;# 
   126  0611                     	;# 
   127  0612                     	;# 
   128  0613                     	;# 
   129  0613                     	;# 
   130  0614                     	;# 
   131  0615                     	;# 
   132  0616                     	;# 
   133  0616                     	;# 
   134  0617                     	;# 
   135  0618                     	;# 
   136  0619                     	;# 
   137  0619                     	;# 
   138  061A                     	;# 
   139  061B                     	;# 
   140  061C                     	;# 
   141  061C                     	;# 
   142  0691                     	;# 
   143  0692                     	;# 
   144  0693                     	;# 
   145  0694                     	;# 
   146  0695                     	;# 
   147  0F0F                     	;# 
   148  0F10                     	;# 
   149  0F11                     	;# 
   150  0F12                     	;# 
   151  0F13                     	;# 
   152  0F14                     	;# 
   153  0F15                     	;# 
   154  0F16                     	;# 
   155  0F17                     	;# 
   156  0F18                     	;# 
   157  0F19                     	;# 
   158  0F1A                     	;# 
   159  0F1B                     	;# 
   160  0F1C                     	;# 
   161  0F1D                     	;# 
   162  0F1E                     	;# 
   163  0F1F                     	;# 
   164  0FE3                     	;# 
   165  0FE4                     	;# 
   166  0FE5                     	;# 
   167  0FE6                     	;# 
   168  0FE7                     	;# 
   169  0FE8                     	;# 
   170  0FE9                     	;# 
   171  0FEA                     	;# 
   172  0FEB                     	;# 
   173  0FED                     	;# 
   174  0FEE                     	;# 
   175  0FEF                     	;# 
   176  0000                     	;# 
   177  0001                     	;# 
   178  0002                     	;# 
   179  0003                     	;# 
   180  0004                     	;# 
   181  0005                     	;# 
   182  0006                     	;# 
   183  0007                     	;# 
   184  0008                     	;# 
   185  0009                     	;# 
   186  000A                     	;# 
   187  000B                     	;# 
   188  000C                     	;# 
   189  000E                     	;# 
   190  0011                     	;# 
   191  0012                     	;# 
   192  0013                     	;# 
   193  0015                     	;# 
   194  0016                     	;# 
   195  0016                     	;# 
   196  0017                     	;# 
   197  0018                     	;# 
   198  0019                     	;# 
   199  001A                     	;# 
   200  001B                     	;# 
   201  001C                     	;# 
   202  008C                     	;# 
   203  008E                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0093                     	;# 
   207  0095                     	;# 
   208  0096                     	;# 
   209  0097                     	;# 
   210  0099                     	;# 
   211  009A                     	;# 
   212  009B                     	;# 
   213  009B                     	;# 
   214  009C                     	;# 
   215  009D                     	;# 
   216  009E                     	;# 
   217  009F                     	;# 
   218  010C                     	;# 
   219  010E                     	;# 
   220  0111                     	;# 
   221  0112                     	;# 
   222  0113                     	;# 
   223  0114                     	;# 
   224  0115                     	;# 
   225  0116                     	;# 
   226  0117                     	;# 
   227  0118                     	;# 
   228  0119                     	;# 
   229  011D                     	;# 
   230  018C                     	;# 
   231  018E                     	;# 
   232  0191                     	;# 
   233  0191                     	;# 
   234  0192                     	;# 
   235  0193                     	;# 
   236  0193                     	;# 
   237  0194                     	;# 
   238  0195                     	;# 
   239  0196                     	;# 
   240  0197                     	;# 
   241  020C                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0391                     	;# 
   258  0392                     	;# 
   259  0393                     	;# 
   260  0498                     	;# 
   261  0498                     	;# 
   262  0499                     	;# 
   263  049A                     	;# 
   264  049B                     	;# 
   265  049B                     	;# 
   266  049C                     	;# 
   267  049E                     	;# 
   268  049F                     	;# 
   269  0611                     	;# 
   270  0612                     	;# 
   271  0613                     	;# 
   272  0613                     	;# 
   273  0614                     	;# 
   274  0615                     	;# 
   275  0616                     	;# 
   276  0616                     	;# 
   277  0617                     	;# 
   278  0618                     	;# 
   279  0619                     	;# 
   280  0619                     	;# 
   281  061A                     	;# 
   282  061B                     	;# 
   283  061C                     	;# 
   284  061C                     	;# 
   285  0691                     	;# 
   286  0692                     	;# 
   287  0693                     	;# 
   288  0694                     	;# 
   289  0695                     	;# 
   290  0F0F                     	;# 
   291  0F10                     	;# 
   292  0F11                     	;# 
   293  0F12                     	;# 
   294  0F13                     	;# 
   295  0F14                     	;# 
   296  0F15                     	;# 
   297  0F16                     	;# 
   298  0F17                     	;# 
   299  0F18                     	;# 
   300  0F19                     	;# 
   301  0F1A                     	;# 
   302  0F1B                     	;# 
   303  0F1C                     	;# 
   304  0F1D                     	;# 
   305  0F1E                     	;# 
   306  0F1F                     	;# 
   307  0FE3                     	;# 
   308  0FE4                     	;# 
   309  0FE5                     	;# 
   310  0FE6                     	;# 
   311  0FE7                     	;# 
   312  0FE8                     	;# 
   313  0FE9                     	;# 
   314  0FEA                     	;# 
   315  0FEB                     	;# 
   316  0FED                     	;# 
   317  0FEE                     	;# 
   318  0FEF                     	;# 
   319  0000                     	;# 
   320  0001                     	;# 
   321  0002                     	;# 
   322  0003                     	;# 
   323  0004                     	;# 
   324  0005                     	;# 
   325  0006                     	;# 
   326  0007                     	;# 
   327  0008                     	;# 
   328  0009                     	;# 
   329  000A                     	;# 
   330  000B                     	;# 
   331  000C                     	;# 
   332  000E                     	;# 
   333  0011                     	;# 
   334  0012                     	;# 
   335  0013                     	;# 
   336  0015                     	;# 
   337  0016                     	;# 
   338  0016                     	;# 
   339  0017                     	;# 
   340  0018                     	;# 
   341  0019                     	;# 
   342  001A                     	;# 
   343  001B                     	;# 
   344  001C                     	;# 
   345  008C                     	;# 
   346  008E                     	;# 
   347  0091                     	;# 
   348  0092                     	;# 
   349  0093                     	;# 
   350  0095                     	;# 
   351  0096                     	;# 
   352  0097                     	;# 
   353  0099                     	;# 
   354  009A                     	;# 
   355  009B                     	;# 
   356  009B                     	;# 
   357  009C                     	;# 
   358  009D                     	;# 
   359  009E                     	;# 
   360  009F                     	;# 
   361  010C                     	;# 
   362  010E                     	;# 
   363  0111                     	;# 
   364  0112                     	;# 
   365  0113                     	;# 
   366  0114                     	;# 
   367  0115                     	;# 
   368  0116                     	;# 
   369  0117                     	;# 
   370  0118                     	;# 
   371  0119                     	;# 
   372  011D                     	;# 
   373  018C                     	;# 
   374  018E                     	;# 
   375  0191                     	;# 
   376  0191                     	;# 
   377  0192                     	;# 
   378  0193                     	;# 
   379  0193                     	;# 
   380  0194                     	;# 
   381  0195                     	;# 
   382  0196                     	;# 
   383  0197                     	;# 
   384  020C                     	;# 
   385  0211                     	;# 
   386  0211                     	;# 
   387  0212                     	;# 
   388  0212                     	;# 
   389  0213                     	;# 
   390  0213                     	;# 
   391  0214                     	;# 
   392  0214                     	;# 
   393  0215                     	;# 
   394  0215                     	;# 
   395  0215                     	;# 
   396  0216                     	;# 
   397  0216                     	;# 
   398  0217                     	;# 
   399  0217                     	;# 
   400  0391                     	;# 
   401  0392                     	;# 
   402  0393                     	;# 
   403  0498                     	;# 
   404  0498                     	;# 
   405  0499                     	;# 
   406  049A                     	;# 
   407  049B                     	;# 
   408  049B                     	;# 
   409  049C                     	;# 
   410  049E                     	;# 
   411  049F                     	;# 
   412  0611                     	;# 
   413  0612                     	;# 
   414  0613                     	;# 
   415  0613                     	;# 
   416  0614                     	;# 
   417  0615                     	;# 
   418  0616                     	;# 
   419  0616                     	;# 
   420  0617                     	;# 
   421  0618                     	;# 
   422  0619                     	;# 
   423  0619                     	;# 
   424  061A                     	;# 
   425  061B                     	;# 
   426  061C                     	;# 
   427  061C                     	;# 
   428  0691                     	;# 
   429  0692                     	;# 
   430  0693                     	;# 
   431  0694                     	;# 
   432  0695                     	;# 
   433  0F0F                     	;# 
   434  0F10                     	;# 
   435  0F11                     	;# 
   436  0F12                     	;# 
   437  0F13                     	;# 
   438  0F14                     	;# 
   439  0F15                     	;# 
   440  0F16                     	;# 
   441  0F17                     	;# 
   442  0F18                     	;# 
   443  0F19                     	;# 
   444  0F1A                     	;# 
   445  0F1B                     	;# 
   446  0F1C                     	;# 
   447  0F1D                     	;# 
   448  0F1E                     	;# 
   449  0F1F                     	;# 
   450  0FE3                     	;# 
   451  0FE4                     	;# 
   452  0FE5                     	;# 
   453  0FE6                     	;# 
   454  0FE7                     	;# 
   455  0FE8                     	;# 
   456  0FE9                     	;# 
   457  0FEA                     	;# 
   458  0FEB                     	;# 
   459  0FED                     	;# 
   460  0FEE                     	;# 
   461  0FEF                     	;# 
   462  0000                     	;# 
   463  0001                     	;# 
   464  0002                     	;# 
   465  0003                     	;# 
   466  0004                     	;# 
   467  0005                     	;# 
   468  0006                     	;# 
   469  0007                     	;# 
   470  0008                     	;# 
   471  0009                     	;# 
   472  000A                     	;# 
   473  000B                     	;# 
   474  000C                     	;# 
   475  000E                     	;# 
   476  0011                     	;# 
   477  0012                     	;# 
   478  0013                     	;# 
   479  0015                     	;# 
   480  0016                     	;# 
   481  0016                     	;# 
   482  0017                     	;# 
   483  0018                     	;# 
   484  0019                     	;# 
   485  001A                     	;# 
   486  001B                     	;# 
   487  001C                     	;# 
   488  008C                     	;# 
   489  008E                     	;# 
   490  0091                     	;# 
   491  0092                     	;# 
   492  0093                     	;# 
   493  0095                     	;# 
   494  0096                     	;# 
   495  0097                     	;# 
   496  0099                     	;# 
   497  009A                     	;# 
   498  009B                     	;# 
   499  009B                     	;# 
   500  009C                     	;# 
   501  009D                     	;# 
   502  009E                     	;# 
   503  009F                     	;# 
   504  010C                     	;# 
   505  010E                     	;# 
   506  0111                     	;# 
   507  0112                     	;# 
   508  0113                     	;# 
   509  0114                     	;# 
   510  0115                     	;# 
   511  0116                     	;# 
   512  0117                     	;# 
   513  0118                     	;# 
   514  0119                     	;# 
   515  011D                     	;# 
   516  018C                     	;# 
   517  018E                     	;# 
   518  0191                     	;# 
   519  0191                     	;# 
   520  0192                     	;# 
   521  0193                     	;# 
   522  0193                     	;# 
   523  0194                     	;# 
   524  0195                     	;# 
   525  0196                     	;# 
   526  0197                     	;# 
   527  020C                     	;# 
   528  0211                     	;# 
   529  0211                     	;# 
   530  0212                     	;# 
   531  0212                     	;# 
   532  0213                     	;# 
   533  0213                     	;# 
   534  0214                     	;# 
   535  0214                     	;# 
   536  0215                     	;# 
   537  0215                     	;# 
   538  0215                     	;# 
   539  0216                     	;# 
   540  0216                     	;# 
   541  0217                     	;# 
   542  0217                     	;# 
   543  0391                     	;# 
   544  0392                     	;# 
   545  0393                     	;# 
   546  0498                     	;# 
   547  0498                     	;# 
   548  0499                     	;# 
   549  049A                     	;# 
   550  049B                     	;# 
   551  049B                     	;# 
   552  049C                     	;# 
   553  049E                     	;# 
   554  049F                     	;# 
   555  0611                     	;# 
   556  0612                     	;# 
   557  0613                     	;# 
   558  0613                     	;# 
   559  0614                     	;# 
   560  0615                     	;# 
   561  0616                     	;# 
   562  0616                     	;# 
   563  0617                     	;# 
   564  0618                     	;# 
   565  0619                     	;# 
   566  0619                     	;# 
   567  061A                     	;# 
   568  061B                     	;# 
   569  061C                     	;# 
   570  061C                     	;# 
   571  0691                     	;# 
   572  0692                     	;# 
   573  0693                     	;# 
   574  0694                     	;# 
   575  0695                     	;# 
   576  0F0F                     	;# 
   577  0F10                     	;# 
   578  0F11                     	;# 
   579  0F12                     	;# 
   580  0F13                     	;# 
   581  0F14                     	;# 
   582  0F15                     	;# 
   583  0F16                     	;# 
   584  0F17                     	;# 
   585  0F18                     	;# 
   586  0F19                     	;# 
   587  0F1A                     	;# 
   588  0F1B                     	;# 
   589  0F1C                     	;# 
   590  0F1D                     	;# 
   591  0F1E                     	;# 
   592  0F1F                     	;# 
   593  0FE3                     	;# 
   594  0FE4                     	;# 
   595  0FE5                     	;# 
   596  0FE6                     	;# 
   597  0FE7                     	;# 
   598  0FE8                     	;# 
   599  0FE9                     	;# 
   600  0FEA                     	;# 
   601  0FEB                     	;# 
   602  0FED                     	;# 
   603  0FEE                     	;# 
   604  0FEF                     	;# 
   605                           
   606                           	psect	idataCOMMON
   607  0544                     __pidataCOMMON:	
   608                           
   609                           ;initializer for _CCTLevel
   610  0544  3414               	retlw	20
   611  000B                     _INTCONbits	set	11
   612  000C                     _PORTA	set	12
   613  000C                     _PORTAbits	set	12
   614  000E                     _PORTC	set	14
   615  000E                     _PORTCbits	set	14
   616  001B                     _PR2	set	27
   617  001C                     _T2CON	set	28
   618  0015                     _TMR0	set	21
   619  0095                     _OPTION_REGbits	set	149
   620  0099                     _OSCCON	set	153
   621  008C                     _TRISA	set	140
   622  008E                     _TRISC	set	142
   623  0097                     _WDTCON	set	151
   624  018C                     _ANSELA	set	396
   625  018E                     _ANSELC	set	398
   626  0192                     _PMADRH	set	402
   627  0191                     _PMADRL	set	401
   628  0195                     _PMCON1bits	set	405
   629  0196                     _PMCON2	set	406
   630  0194                     _PMDATH	set	404
   631  0193                     _PMDATL	set	403
   632  020C                     _WPUA	set	524
   633  0612                     _PWM1DCH	set	1554
   634  0611                     _PWM1DCL	set	1553
   635  0616                     _PWM2CON	set	1558
   636  0615                     _PWM2DCH	set	1557
   637  0614                     _PWM2DCL	set	1556
   638  0618                     _PWM3DCH	set	1560
   639  0617                     _PWM3DCL	set	1559
   640  061B                     _PWM4DCH	set	1563
   641  061A                     _PWM4DCL	set	1562
   642                           
   643                           ; #config settings
   644  0000                     
   645                           	psect	cinit
   646  004B                     start_initialization:	
   647  004B                     __initialization:	
   648                           
   649                           ; Clear objects allocated to BITCOMMON
   650  004B  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   651  004C  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   652                           
   653                           ; Clear objects allocated to COMMON
   654  004D  01F8               	clrf	__pbssCOMMON& (0+127)
   655                           
   656                           ; Clear objects allocated to BANK0
   657  004E  3020               	movlw	low __pbssBANK0
   658  004F  0084               	movwf	4
   659  0050  3000               	movlw	high __pbssBANK0
   660  0051  0085               	movwf	5
   661  0052  301B               	movlw	27
   662  0053  253E               	fcall	clear_ram0
   663                           
   664                           ; Initialize objects allocated to COMMON
   665  0054  2544               	fcall	__pidataCOMMON	;fetch initializer
   666  0055  00F9               	movwf	__pdataCOMMON& (0+127)
   667  0056                     end_of_initialization:	
   668                           ;End of C runtime variable initialization code
   669                           
   670  0056                     __end_of__initialization:	
   671  0056  0020               	movlb	0
   672  0057  2D19               	ljmp	_main	;jump to C main() function
   673                           
   674                           	psect	bitbssCOMMON
   675  0380                     __pbitbssCOMMON:	
   676  0380                     IrDeal@Night:	
   677  0380                     	ds	1
   678  0381                     _CCT:	
   679  0381                     	ds	1
   680  0382                     _ColorTemperature:	
   681  0382                     	ds	1
   682  0383                     _ColorTemperatureBack:	
   683  0383                     	ds	1
   684  0384                     _LeadFlg:	
   685  0384                     	ds	1
   686  0385                     _Ms10flag:	
   687  0385                     	ds	1
   688  0386                     _PlowFlg:	
   689  0386                     	ds	1
   690  0387                     _RcvFlg:	
   691  0387                     	ds	1
   692  0388                     _TimeFlag:	
   693  0388                     	ds	1
   694                           
   695                           	psect	bssCOMMON
   696  0078                     __pbssCOMMON:	
   697  0078                     _DimmingNum:	
   698  0078                     	ds	1
   699                           
   700                           	psect	dataCOMMON
   701  0079                     __pdataCOMMON:	
   702  0079                     _CCTLevel:	
   703  0079                     	ds	1
   704                           
   705                           	psect	bssBANK0
   706  0020                     __pbssBANK0:	
   707  0020                     _Bz:	
   708  0020                     	ds	7
   709  0027                     _IrData:	
   710  0027                     	ds	4
   711  002B                     _Pcount:	
   712  002B                     	ds	2
   713  002D                     _TimingCnt:	
   714  002D                     	ds	2
   715  002F                     _TimingNum:	
   716  002F                     	ds	2
   717  0031                     GetIrAN@cnt1:	
   718  0031                     	ds	1
   719  0032                     GetIrAN@cnt2:	
   720  0032                     	ds	1
   721  0033                     _DimmingBack:	
   722  0033                     	ds	1
   723  0034                     _DimmingNumBackup:	
   724  0034                     	ds	1
   725  0035                     _IrAn:	
   726  0035                     	ds	1
   727  0036                     _Ms10Cnt:	
   728  0036                     	ds	1
   729  0037                     _RecvN:	
   730  0037                     	ds	1
   731  0038                     _S1Cnt:	
   732  0038                     	ds	1
   733  0039                     _Addr:	
   734  0039                     	ds	2
   735                           
   736                           	psect	clrtext
   737  053E                     clear_ram0:	
   738                           ;	Called with FSR0 containing the base address, and
   739                           ;	WREG with the size to clear
   740                           
   741  053E  0064               	clrwdt	;clear the watchdog before getting into this loop
   742  053F                     clrloop0:	
   743  053F  0180               	clrf	0	;clear RAM location pointed to by FSR
   744  0540  3101               	addfsr 0,1
   745  0541  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   746  0542  2D3F               	goto	clrloop0	;have we reached the end yet?
   747  0543  3400               	retlw	0	;all done for this memory range, return
   748                           
   749                           	psect	cstackCOMMON
   750  0072                     __pcstackCOMMON:	
   751  0072                     ?_Initialize:	
   752  0072                     ?_InitPowerOn:	
   753                           ; 0 bytes @ 0x0
   754                           
   755  0072                     ?_TimeBase:	
   756                           ; 0 bytes @ 0x0
   757                           
   758  0072                     ?_IrDeal:	
   759                           ; 0 bytes @ 0x0
   760                           
   761  0072                     ?_ReadDataFromFlash:	
   762                           ; 0 bytes @ 0x0
   763                           
   764  0072                     ?_flash_memory_erase:	
   765                           ; 0 bytes @ 0x0
   766                           
   767  0072                     ?_IrRcv:	
   768                           ; 0 bytes @ 0x0
   769                           
   770  0072                     ??_IrRcv:	
   771                           ; 0 bytes @ 0x0
   772                           
   773  0072                     ?_main:	
   774                           ; 0 bytes @ 0x0
   775                           
   776  0072                     ?_SaveDataToFlash:	
   777                           ; 0 bytes @ 0x0
   778                           
   779  0072                     ?_ISR:	
   780                           ; 0 bytes @ 0x0
   781                           
   782  0072                     ?_flash_memory_read:	
   783                           ; 0 bytes @ 0x0
   784                           
   785  0072                     ?_CheckIr:	
   786                           ; 1 bytes @ 0x0
   787                           
   788  0072                     ?_GetIrAN:	
   789                           ; 1 bytes @ 0x0
   790                           
   791                           
   792                           ; 1 bytes @ 0x0
   793  0072                     	ds	1
   794  0073                     ??_ISR:	
   795                           
   796                           ; 0 bytes @ 0x1
   797  0073                     	ds	3
   798  0076                     ??_Initialize:	
   799  0076                     ??_flash_memory_read:	
   800                           ; 0 bytes @ 0x4
   801                           
   802  0076                     ??_flash_memory_erase:	
   803                           ; 0 bytes @ 0x4
   804                           
   805  0076                     ?_flash_memory_write:	
   806                           ; 0 bytes @ 0x4
   807                           
   808  0076                     ?_BzSet:	
   809                           ; 0 bytes @ 0x4
   810                           
   811  0076                     ??_CheckIr:	
   812                           ; 0 bytes @ 0x4
   813                           
   814  0076                     ??_GetIrAN:	
   815                           ; 0 bytes @ 0x4
   816                           
   817  0076                     ??___wmul:	
   818                           ; 0 bytes @ 0x4
   819                           
   820  0076                     flash_memory_write@data:	
   821                           ; 0 bytes @ 0x4
   822                           
   823  0076                     BzSet@Long:	
   824                           ; 1 bytes @ 0x4
   825                           
   826  0076                     ___wmul@product:	
   827                           ; 2 bytes @ 0x4
   828                           
   829                           
   830                           ; 2 bytes @ 0x4
   831  0076                     	ds	1
   832  0077                     GetIrAN@AN:	
   833  0077                     flash_memory_write@datalen:	
   834                           ; 1 bytes @ 0x5
   835                           
   836                           
   837                           ; 1 bytes @ 0x5
   838  0077                     	ds	1
   839  0078                     ??_main:	
   840                           
   841                           	psect	cstackBANK0
   842  003B                     __pcstackBANK0:	
   843                           ; 0 bytes @ 0x6
   844                           
   845  003B                     ?_Delay:	
   846  003B                     ??_flash_memory_write:	
   847                           ; 0 bytes @ 0x0
   848                           
   849  003B                     ??_BzSet:	
   850                           ; 0 bytes @ 0x0
   851                           
   852  003B                     ?___wmul:	
   853                           ; 0 bytes @ 0x0
   854                           
   855  003B                     flash_memory_read@address:	
   856                           ; 2 bytes @ 0x0
   857                           
   858  003B                     flash_memory_erase@Page:	
   859                           ; 1 bytes @ 0x0
   860                           
   861  003B                     ___wmul@multiplier:	
   862                           ; 1 bytes @ 0x0
   863                           
   864  003B                     Delay@Time:	
   865                           ; 2 bytes @ 0x0
   866                           
   867                           
   868                           ; 4 bytes @ 0x0
   869  003B                     	ds	1
   870  003C                     BzSet@Times:	
   871  003C                     flash_memory_read@AddrBuf:	
   872                           ; 1 bytes @ 0x1
   873                           
   874  003C                     flash_memory_erase@AddrBuf:	
   875                           ; 2 bytes @ 0x1
   876                           
   877                           
   878                           ; 2 bytes @ 0x1
   879  003C                     	ds	1
   880  003D                     flash_memory_write@address:	
   881  003D                     ___wmul@multiplicand:	
   882                           ; 1 bytes @ 0x2
   883                           
   884                           
   885                           ; 2 bytes @ 0x2
   886  003D                     	ds	1
   887  003E                     ??_ReadDataFromFlash:	
   888  003E                     flash_memory_write@wdi:	
   889                           ; 0 bytes @ 0x3
   890                           
   891                           
   892                           ; 1 bytes @ 0x3
   893  003E                     	ds	1
   894  003F                     ??_Delay:	
   895  003F                     ?_WritePwmPercentage:	
   896                           ; 0 bytes @ 0x4
   897                           
   898  003F                     ?___awdiv:	
   899                           ; 0 bytes @ 0x4
   900                           
   901  003F                     ReadDataFromFlash@AddrTemp:	
   902                           ; 2 bytes @ 0x4
   903                           
   904  003F                     WritePwmPercentage@Percentage:	
   905                           ; 1 bytes @ 0x4
   906                           
   907  003F                     flash_memory_write@AddrBuf:	
   908                           ; 2 bytes @ 0x4
   909                           
   910  003F                     ___awdiv@divisor:	
   911                           ; 2 bytes @ 0x4
   912                           
   913                           
   914                           ; 2 bytes @ 0x4
   915  003F                     	ds	2
   916  0041                     ??_WritePwmPercentage:	
   917  0041                     ??_SaveDataToFlash:	
   918                           ; 0 bytes @ 0x6
   919                           
   920  0041                     ___awdiv@dividend:	
   921                           ; 0 bytes @ 0x6
   922                           
   923                           
   924                           ; 2 bytes @ 0x6
   925  0041                     	ds	2
   926  0043                     ??___awdiv:	
   927  0043                     SaveDataToFlash@AddrTemp:	
   928                           ; 0 bytes @ 0x8
   929                           
   930  0043                     WritePwmPercentage@AN:	
   931                           ; 1 bytes @ 0x8
   932                           
   933                           
   934                           ; 1 bytes @ 0x8
   935  0043                     	ds	1
   936  0044                     ??_InitPowerOn:	
   937  0044                     ??_IrDeal:	
   938                           ; 0 bytes @ 0x9
   939                           
   940  0044                     ___awdiv@counter:	
   941                           ; 0 bytes @ 0x9
   942                           
   943                           
   944                           ; 1 bytes @ 0x9
   945  0044                     	ds	1
   946  0045                     ___awdiv@sign:	
   947                           
   948                           ; 1 bytes @ 0xA
   949  0045                     	ds	1
   950  0046                     ___awdiv@quotient:	
   951                           
   952                           ; 2 bytes @ 0xB
   953  0046                     	ds	2
   954  0048                     ??_TimeBase:	
   955                           
   956                           ; 0 bytes @ 0xD
   957  0048                     	ds	5
   958                           
   959                           	psect	maintext
   960  0519                     __pmaintext:	
   961 ;;
   962 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   963 ;;
   964 ;; *************** function _main *****************
   965 ;; Defined at:
   966 ;;		line 61 in file "sur/Main.c"
   967 ;; Parameters:    Size  Location     Type
   968 ;;		None
   969 ;; Auto vars:     Size  Location     Type
   970 ;;		None
   971 ;; Return value:  Size  Location     Type
   972 ;;		None               void
   973 ;; Registers used:
   974 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
   975 ;; Tracked objects:
   976 ;;		On entry : 17F/0
   977 ;;		On exit  : 0/0
   978 ;;		Unchanged: 0/0
   979 ;; Data sizes:     COMMON   BANK0   BANK1
   980 ;;      Params:         0       0       0
   981 ;;      Locals:         0       0       0
   982 ;;      Temps:          0       0       0
   983 ;;      Totals:         0       0       0
   984 ;;Total ram usage:        0 bytes
   985 ;; Hardware stack levels required when called:    5
   986 ;; This function calls:
   987 ;;		_CheckIr
   988 ;;		_Delay
   989 ;;		_InitPowerOn
   990 ;;		_Initialize
   991 ;;		_IrDeal
   992 ;;		_TimeBase
   993 ;; This function is called by:
   994 ;;		Startup code after reset
   995 ;; This function uses a non-reentrant model
   996 ;;
   997                           
   998                           
   999                           ;psect for function _main
  1000  0519                     _main:	
  1001                           
  1002                           ;Main.c: 63: Initialize();
  1003                           
  1004                           ;incstack = 0
  1005                           ; Regs used in _main: [allreg]
  1006  0519  243A               	fcall	_Initialize
  1007                           
  1008                           ;Main.c: 64: Delay(1000);
  1009  051A  3000               	movlw	0
  1010  051B  0020               	movlb	0	; select bank0
  1011  051C  00BE               	movwf	Delay@Time+3
  1012  051D  3000               	movlw	0
  1013  051E  00BD               	movwf	Delay@Time+2
  1014  051F  3003               	movlw	3
  1015  0520  00BC               	movwf	Delay@Time+1
  1016  0521  30E8               	movlw	232
  1017  0522  00BB               	movwf	Delay@Time
  1018  0523  2464               	fcall	_Delay
  1019                           
  1020                           ;Main.c: 65: InitPowerOn();
  1021  0524  24E9               	fcall	_InitPowerOn
  1022  0525                     l135:	
  1023                           ;Main.c: 66: while (1)
  1024                           
  1025  0525  0064               	clrwdt	;# 
  1026                           
  1027                           ;Main.c: 69: TimeBase();
  1028  0526  2132               	fcall	_TimeBase
  1029                           
  1030                           ;Main.c: 70: if(CheckIr())
  1031  0527  2502               	fcall	_CheckIr
  1032  0528  3A00               	xorlw	0
  1033  0529  1903               	skipnz
  1034  052A  2D25               	goto	l135
  1035                           
  1036                           ;Main.c: 71: {
  1037                           ;Main.c: 72: IrDeal();
  1038  052B  2058               	fcall	_IrDeal
  1039  052C  2D25               	goto	l135
  1040  052D                     __end_of_main:	
  1041                           
  1042                           	psect	text1
  1043  0132                     __ptext1:	
  1044 ;; *************** function _TimeBase *****************
  1045 ;; Defined at:
  1046 ;;		line 274 in file "sur/Main.c"
  1047 ;; Parameters:    Size  Location     Type
  1048 ;;		None
  1049 ;; Auto vars:     Size  Location     Type
  1050 ;;		None
  1051 ;; Return value:  Size  Location     Type
  1052 ;;		None               void
  1053 ;; Registers used:
  1054 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1055 ;; Tracked objects:
  1056 ;;		On entry : 0/0
  1057 ;;		On exit  : 0/0
  1058 ;;		Unchanged: 0/0
  1059 ;; Data sizes:     COMMON   BANK0   BANK1
  1060 ;;      Params:         0       0       0
  1061 ;;      Locals:         0       0       0
  1062 ;;      Temps:          0       5       0
  1063 ;;      Totals:         0       5       0
  1064 ;;Total ram usage:        5 bytes
  1065 ;; Hardware stack levels used:    1
  1066 ;; Hardware stack levels required when called:    4
  1067 ;; This function calls:
  1068 ;;		_GetIrAN
  1069 ;;		_SaveDataToFlash
  1070 ;;		_WritePwmPercentage
  1071 ;;		___awdiv
  1072 ;;		___wmul
  1073 ;; This function is called by:
  1074 ;;		_main
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           
  1079                           ;psect for function _TimeBase
  1080  0132                     _TimeBase:	
  1081                           
  1082                           ;Main.c: 276: if(Ms10flag==1)
  1083                           
  1084                           ;incstack = 0
  1085                           ; Regs used in _TimeBase: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1086  0132  1EF0               	btfss	_Ms10flag/(0+8),_Ms10flag& (0+7)
  1087  0133  0008               	return
  1088                           
  1089                           ;Main.c: 277: {
  1090                           ;Main.c: 278: Ms10flag=0;
  1091  0134  12F0               	bcf	_Ms10flag/(0+8),_Ms10flag& (0+7)
  1092                           
  1093                           ;Main.c: 279: IrAn=GetIrAN();
  1094  0135  24AD               	fcall	_GetIrAN
  1095  0136  0020               	movlb	0	; select bank0
  1096  0137  00C8               	movwf	??_TimeBase
  1097  0138  0848               	movf	??_TimeBase,w
  1098  0139  00B5               	movwf	_IrAn
  1099                           
  1100                           ;Main.c: 280: S1Cnt+=1;
  1101  013A  3001               	movlw	1
  1102  013B  00C8               	movwf	??_TimeBase
  1103  013C  0848               	movf	??_TimeBase,w
  1104  013D  07B8               	addwf	_S1Cnt,f
  1105                           
  1106                           ;Main.c: 281: if(S1Cnt>=100)
  1107  013E  3064               	movlw	100
  1108  013F  0238               	subwf	_S1Cnt,w
  1109  0140  1C03               	skipc
  1110  0141  295F               	goto	l1892
  1111                           
  1112                           ;Main.c: 282: {
  1113                           ;Main.c: 283: S1Cnt=0;
  1114  0142  01B8               	clrf	_S1Cnt
  1115                           
  1116                           ;Main.c: 284: if(TimingNum!=0)
  1117  0143  0830               	movf	_TimingNum+1,w
  1118  0144  042F               	iorwf	_TimingNum,w
  1119  0145  1903               	skipnz
  1120  0146  295F               	goto	l1892
  1121                           
  1122                           ;Main.c: 285: {
  1123                           ;Main.c: 286: TimingCnt+=1;
  1124  0147  3001               	movlw	1
  1125  0148  07AD               	addwf	_TimingCnt,f
  1126  0149  3000               	movlw	0
  1127  014A  3DAE               	addwfc	_TimingCnt+1,f
  1128                           
  1129                           ;Main.c: 287: if(TimingCnt>=TimingNum)
  1130  014B  0830               	movf	_TimingNum+1,w
  1131  014C  022E               	subwf	_TimingCnt+1,w
  1132  014D  1D03               	skipz
  1133  014E  2951               	goto	u1875
  1134  014F  082F               	movf	_TimingNum,w
  1135  0150  022D               	subwf	_TimingCnt,w
  1136  0151                     u1875:	
  1137  0151  1C03               	skipc
  1138  0152  295F               	goto	l1892
  1139                           
  1140                           ;Main.c: 288: {
  1141                           ;Main.c: 289: TimingNum=0;
  1142  0153  01AF               	clrf	_TimingNum
  1143  0154  01B0               	clrf	_TimingNum+1
  1144                           
  1145                           ;Main.c: 290: TimingCnt=0;
  1146  0155  01AD               	clrf	_TimingCnt
  1147  0156  01AE               	clrf	_TimingCnt+1
  1148                           
  1149                           ;Main.c: 291: DimmingNum=0;
  1150  0157  01F8               	clrf	_DimmingNum
  1151                           
  1152                           ;Main.c: 292: PORTCbits.RC0=0;
  1153  0158  100E               	bcf	14,0	;volatile
  1154                           
  1155                           ;Main.c: 293: WritePwmPercentage(2,0);
  1156  0159  3000               	movlw	0
  1157  015A  00BF               	movwf	WritePwmPercentage@Percentage
  1158  015B  3000               	movlw	0
  1159  015C  00C0               	movwf	WritePwmPercentage@Percentage+1
  1160  015D  3002               	movlw	2
  1161  015E  2268               	fcall	_WritePwmPercentage
  1162  015F                     l1892:	
  1163                           
  1164                           ;Main.c: 294: }
  1165                           ;Main.c: 295: }
  1166                           ;Main.c: 296: }
  1167                           ;Main.c: 297: if(CCT==1)
  1168  015F  1CF0               	btfss	_CCT/(0+8),_CCT& (0+7)
  1169  0160  0008               	return
  1170                           
  1171                           ;Main.c: 298: {
  1172                           ;Main.c: 299: if(TimeFlag==0)
  1173  0161  1871               	btfsc	_TimeFlag/(0+8),_TimeFlag& (0+7)
  1174  0162  29A1               	goto	l1908
  1175                           
  1176                           ;Main.c: 300: {
  1177                           ;Main.c: 301: CCTLevel-=1;
  1178  0163  3001               	movlw	1
  1179  0164  02F9               	subwf	_CCTLevel,f
  1180                           
  1181                           ;Main.c: 302: DimmingNum=DimmingBack*CCTLevel/20;
  1182  0165  3014               	movlw	20
  1183  0166  0020               	movlb	0	; select bank0
  1184  0167  00BF               	movwf	___awdiv@divisor
  1185  0168  3000               	movlw	0
  1186  0169  00C0               	movwf	___awdiv@divisor+1
  1187  016A  0833               	movf	_DimmingBack,w
  1188  016B  00C8               	movwf	??_TimeBase
  1189  016C  01C9               	clrf	??_TimeBase+1
  1190  016D  0848               	movf	??_TimeBase,w
  1191  016E  00BB               	movwf	___wmul@multiplier
  1192  016F  0849               	movf	??_TimeBase+1,w
  1193  0170  00BC               	movwf	___wmul@multiplier+1
  1194  0171  0879               	movf	_CCTLevel,w
  1195  0172  00CA               	movwf	??_TimeBase+2
  1196  0173  01CB               	clrf	??_TimeBase+3
  1197  0174  084A               	movf	??_TimeBase+2,w
  1198  0175  00BD               	movwf	___wmul@multiplicand
  1199  0176  084B               	movf	??_TimeBase+3,w
  1200  0177  00BE               	movwf	___wmul@multiplicand+1
  1201  0178  24CB               	fcall	___wmul
  1202  0179  0020               	movlb	0	; select bank0
  1203  017A  083C               	movf	?___wmul+1,w
  1204  017B  01C2               	clrf	___awdiv@dividend+1
  1205  017C  07C2               	addwf	___awdiv@dividend+1,f
  1206  017D  083B               	movf	?___wmul,w
  1207  017E  01C1               	clrf	___awdiv@dividend
  1208  017F  07C1               	addwf	___awdiv@dividend,f
  1209  0180  22E4               	fcall	___awdiv
  1210  0181  0020               	movlb	0	; select bank0
  1211  0182  083F               	movf	?___awdiv,w
  1212  0183  00CC               	movwf	??_TimeBase+4
  1213  0184  084C               	movf	??_TimeBase+4,w
  1214  0185  00F8               	movwf	_DimmingNum
  1215                           
  1216                           ;Main.c: 303: if(CCTLevel==0)
  1217  0186  08F9               	movf	_CCTLevel,f
  1218  0187  1D03               	skipz
  1219  0188  29CD               	goto	l1918
  1220                           
  1221                           ;Main.c: 304: {
  1222                           ;Main.c: 305: TimeFlag=1;
  1223  0189  1471               	bsf	_TimeFlag/(0+8),_TimeFlag& (0+7)
  1224                           
  1225                           ;Main.c: 306: PORTCbits.RC4=~PORTCbits.RC4;
  1226  018A  1003               	clrc
  1227  018B  1E0E               	btfss	14,4	;volatile
  1228  018C  1403               	setc
  1229  018D  1C03               	btfss	3,0
  1230  018E  2992               	goto	u1910
  1231  018F  0020               	movlb	0	; select bank0
  1232  0190  160E               	bsf	14,4	;volatile
  1233  0191  2994               	goto	u1924
  1234  0192                     u1910:	
  1235  0192  0020               	movlb	0	; select bank0
  1236  0193  120E               	bcf	14,4	;volatile
  1237  0194                     u1924:	
  1238                           
  1239                           ;Main.c: 307: PORTCbits.RC5=~PORTCbits.RC5;
  1240  0194  1003               	clrc
  1241  0195  1E8E               	btfss	14,5	;volatile
  1242  0196  1403               	setc
  1243  0197  1C03               	btfss	3,0
  1244  0198  299C               	goto	u1930
  1245  0199  0020               	movlb	0	; select bank0
  1246  019A  168E               	bsf	14,5	;volatile
  1247  019B  299E               	goto	l1906
  1248  019C                     u1930:	
  1249  019C  0020               	movlb	0	; select bank0
  1250  019D  128E               	bcf	14,5	;volatile
  1251  019E                     l1906:	
  1252                           
  1253                           ;Main.c: 308: ColorTemperature=~ColorTemperature;
  1254  019E  3004               	movlw	(0+1) shl (_ColorTemperature& (0+7))
  1255  019F  06F0               	xorwf	_ColorTemperature/(0+8),f
  1256                           
  1257                           ;Main.c: 309: }
  1258                           ;Main.c: 310: }
  1259  01A0  29CD               	goto	l1918
  1260  01A1                     l1908:	
  1261                           
  1262                           ;Main.c: 311: else
  1263                           ;Main.c: 312: {
  1264                           ;Main.c: 313: CCTLevel+=1;
  1265  01A1  3001               	movlw	1
  1266  01A2  0020               	movlb	0	; select bank0
  1267  01A3  00C8               	movwf	??_TimeBase
  1268  01A4  0848               	movf	??_TimeBase,w
  1269  01A5  07F9               	addwf	_CCTLevel,f
  1270                           
  1271                           ;Main.c: 314: DimmingNum=DimmingBack*CCTLevel/20;
  1272  01A6  3014               	movlw	20
  1273  01A7  00BF               	movwf	___awdiv@divisor
  1274  01A8  3000               	movlw	0
  1275  01A9  00C0               	movwf	___awdiv@divisor+1
  1276  01AA  0833               	movf	_DimmingBack,w
  1277  01AB  00C8               	movwf	??_TimeBase
  1278  01AC  01C9               	clrf	??_TimeBase+1
  1279  01AD  0848               	movf	??_TimeBase,w
  1280  01AE  00BB               	movwf	___wmul@multiplier
  1281  01AF  0849               	movf	??_TimeBase+1,w
  1282  01B0  00BC               	movwf	___wmul@multiplier+1
  1283  01B1  0879               	movf	_CCTLevel,w
  1284  01B2  00CA               	movwf	??_TimeBase+2
  1285  01B3  01CB               	clrf	??_TimeBase+3
  1286  01B4  084A               	movf	??_TimeBase+2,w
  1287  01B5  00BD               	movwf	___wmul@multiplicand
  1288  01B6  084B               	movf	??_TimeBase+3,w
  1289  01B7  00BE               	movwf	___wmul@multiplicand+1
  1290  01B8  24CB               	fcall	___wmul
  1291  01B9  0020               	movlb	0	; select bank0
  1292  01BA  083C               	movf	?___wmul+1,w
  1293  01BB  01C2               	clrf	___awdiv@dividend+1
  1294  01BC  07C2               	addwf	___awdiv@dividend+1,f
  1295  01BD  083B               	movf	?___wmul,w
  1296  01BE  01C1               	clrf	___awdiv@dividend
  1297  01BF  07C1               	addwf	___awdiv@dividend,f
  1298  01C0  22E4               	fcall	___awdiv
  1299  01C1  0020               	movlb	0	; select bank0
  1300  01C2  083F               	movf	?___awdiv,w
  1301  01C3  00CC               	movwf	??_TimeBase+4
  1302  01C4  084C               	movf	??_TimeBase+4,w
  1303  01C5  00F8               	movwf	_DimmingNum
  1304                           
  1305                           ;Main.c: 315: if(CCTLevel==20)
  1306  01C6  0879               	movf	_CCTLevel,w
  1307  01C7  3A14               	xorlw	20
  1308  01C8  1D03               	skipz
  1309  01C9  29CD               	goto	l1918
  1310                           
  1311                           ;Main.c: 316: {
  1312                           ;Main.c: 317: CCT=0;
  1313  01CA  10F0               	bcf	_CCT/(0+8),_CCT& (0+7)
  1314                           
  1315                           ;Main.c: 318: TimeFlag=0;
  1316  01CB  1071               	bcf	_TimeFlag/(0+8),_TimeFlag& (0+7)
  1317                           
  1318                           ;Main.c: 319: SaveDataToFlash();
  1319  01CC  238A               	fcall	_SaveDataToFlash
  1320  01CD                     l1918:	
  1321                           
  1322                           ;Main.c: 320: }
  1323                           ;Main.c: 321: }
  1324                           ;Main.c: 322: WritePwmPercentage(2,DimmingNum*5);
  1325  01CD  0878               	movf	_DimmingNum,w
  1326  01CE  0020               	movlb	0	; select bank0
  1327  01CF  00C8               	movwf	??_TimeBase
  1328  01D0  01C9               	clrf	??_TimeBase+1
  1329  01D1  0848               	movf	??_TimeBase,w
  1330  01D2  00BB               	movwf	___wmul@multiplier
  1331  01D3  0849               	movf	??_TimeBase+1,w
  1332  01D4  00BC               	movwf	___wmul@multiplier+1
  1333  01D5  3005               	movlw	5
  1334  01D6  00BD               	movwf	___wmul@multiplicand
  1335  01D7  3000               	movlw	0
  1336  01D8  00BE               	movwf	___wmul@multiplicand+1
  1337  01D9  24CB               	fcall	___wmul
  1338  01DA  0020               	movlb	0	; select bank0
  1339  01DB  083C               	movf	?___wmul+1,w
  1340  01DC  01C0               	clrf	WritePwmPercentage@Percentage+1
  1341  01DD  07C0               	addwf	WritePwmPercentage@Percentage+1,f
  1342  01DE  083B               	movf	?___wmul,w
  1343  01DF  01BF               	clrf	WritePwmPercentage@Percentage
  1344  01E0  07BF               	addwf	WritePwmPercentage@Percentage,f
  1345  01E1  3002               	movlw	2
  1346  01E2  2268               	fcall	_WritePwmPercentage
  1347  01E3  0008               	return
  1348  01E4                     __end_of_TimeBase:	
  1349                           
  1350                           	psect	text2
  1351  02E4                     __ptext2:	
  1352 ;; *************** function ___awdiv *****************
  1353 ;; Defined at:
  1354 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.30\sources\common\awdiv.c"
  1355 ;; Parameters:    Size  Location     Type
  1356 ;;  divisor         2    4[BANK0 ] int 
  1357 ;;  dividend        2    6[BANK0 ] int 
  1358 ;; Auto vars:     Size  Location     Type
  1359 ;;  quotient        2   11[BANK0 ] int 
  1360 ;;  sign            1   10[BANK0 ] unsigned char 
  1361 ;;  counter         1    9[BANK0 ] unsigned char 
  1362 ;; Return value:  Size  Location     Type
  1363 ;;                  2    4[BANK0 ] int 
  1364 ;; Registers used:
  1365 ;;		wreg, status,2, status,0
  1366 ;; Tracked objects:
  1367 ;;		On entry : 0/0
  1368 ;;		On exit  : 0/0
  1369 ;;		Unchanged: 0/0
  1370 ;; Data sizes:     COMMON   BANK0   BANK1
  1371 ;;      Params:         0       4       0
  1372 ;;      Locals:         0       4       0
  1373 ;;      Temps:          0       1       0
  1374 ;;      Totals:         0       9       0
  1375 ;;Total ram usage:        9 bytes
  1376 ;; Hardware stack levels used:    1
  1377 ;; Hardware stack levels required when called:    2
  1378 ;; This function calls:
  1379 ;;		Nothing
  1380 ;; This function is called by:
  1381 ;;		_TimeBase
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           
  1386                           ;psect for function ___awdiv
  1387  02E4                     ___awdiv:	
  1388                           
  1389                           ;incstack = 0
  1390                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1391  02E4  0020               	movlb	0	; select bank0
  1392  02E5  01C5               	clrf	___awdiv@sign
  1393  02E6  1FC0               	btfss	___awdiv@divisor+1,7
  1394  02E7  2AEF               	goto	l1756
  1395  02E8  09BF               	comf	___awdiv@divisor,f
  1396  02E9  09C0               	comf	___awdiv@divisor+1,f
  1397  02EA  0ABF               	incf	___awdiv@divisor,f
  1398  02EB  1903               	skipnz
  1399  02EC  0AC0               	incf	___awdiv@divisor+1,f
  1400  02ED  01C5               	clrf	___awdiv@sign
  1401  02EE  0AC5               	incf	___awdiv@sign,f
  1402  02EF                     l1756:	
  1403  02EF  1FC2               	btfss	___awdiv@dividend+1,7
  1404  02F0  2AFA               	goto	l1762
  1405  02F1  09C1               	comf	___awdiv@dividend,f
  1406  02F2  09C2               	comf	___awdiv@dividend+1,f
  1407  02F3  0AC1               	incf	___awdiv@dividend,f
  1408  02F4  1903               	skipnz
  1409  02F5  0AC2               	incf	___awdiv@dividend+1,f
  1410  02F6  3001               	movlw	1
  1411  02F7  00C3               	movwf	??___awdiv
  1412  02F8  0843               	movf	??___awdiv,w
  1413  02F9  06C5               	xorwf	___awdiv@sign,f
  1414  02FA                     l1762:	
  1415  02FA  01C6               	clrf	___awdiv@quotient
  1416  02FB  01C7               	clrf	___awdiv@quotient+1
  1417  02FC  0840               	movf	___awdiv@divisor+1,w
  1418  02FD  043F               	iorwf	___awdiv@divisor,w
  1419  02FE  1903               	skipnz
  1420  02FF  2B29               	goto	l1784
  1421  0300  01C4               	clrf	___awdiv@counter
  1422  0301  0AC4               	incf	___awdiv@counter,f
  1423  0302                     l1772:	
  1424  0302  1BC0               	btfsc	___awdiv@divisor+1,7
  1425  0303  2B0E               	goto	l1774
  1426  0304  3001               	movlw	1
  1427  0305                     u1645:	
  1428  0305  35BF               	lslf	___awdiv@divisor,f
  1429  0306  0DC0               	rlf	___awdiv@divisor+1,f
  1430  0307  0B89               	decfsz	9,f
  1431  0308  2B05               	goto	u1645
  1432  0309  3001               	movlw	1
  1433  030A  00C3               	movwf	??___awdiv
  1434  030B  0843               	movf	??___awdiv,w
  1435  030C  07C4               	addwf	___awdiv@counter,f
  1436  030D  2B02               	goto	l1772
  1437  030E                     l1774:	
  1438  030E  3001               	movlw	1
  1439  030F                     u1665:	
  1440  030F  35C6               	lslf	___awdiv@quotient,f
  1441  0310  0DC7               	rlf	___awdiv@quotient+1,f
  1442  0311  0B89               	decfsz	9,f
  1443  0312  2B0F               	goto	u1665
  1444  0313  0840               	movf	___awdiv@divisor+1,w
  1445  0314  0242               	subwf	___awdiv@dividend+1,w
  1446  0315  1D03               	skipz
  1447  0316  2B19               	goto	u1675
  1448  0317  083F               	movf	___awdiv@divisor,w
  1449  0318  0241               	subwf	___awdiv@dividend,w
  1450  0319                     u1675:	
  1451  0319  1C03               	skipc
  1452  031A  2B20               	goto	l1780
  1453  031B  083F               	movf	___awdiv@divisor,w
  1454  031C  02C1               	subwf	___awdiv@dividend,f
  1455  031D  0840               	movf	___awdiv@divisor+1,w
  1456  031E  3BC2               	subwfb	___awdiv@dividend+1,f
  1457  031F  1446               	bsf	___awdiv@quotient,0
  1458  0320                     l1780:	
  1459  0320  3001               	movlw	1
  1460  0321                     u1685:	
  1461  0321  36C0               	lsrf	___awdiv@divisor+1,f
  1462  0322  0CBF               	rrf	___awdiv@divisor,f
  1463  0323  0B89               	decfsz	9,f
  1464  0324  2B21               	goto	u1685
  1465  0325  3001               	movlw	1
  1466  0326  02C4               	subwf	___awdiv@counter,f
  1467  0327  1D03               	btfss	3,2
  1468  0328  2B0E               	goto	l1774
  1469  0329                     l1784:	
  1470  0329  0845               	movf	___awdiv@sign,w
  1471  032A  1903               	btfsc	3,2
  1472  032B  2B31               	goto	l1788
  1473  032C  09C6               	comf	___awdiv@quotient,f
  1474  032D  09C7               	comf	___awdiv@quotient+1,f
  1475  032E  0AC6               	incf	___awdiv@quotient,f
  1476  032F  1903               	skipnz
  1477  0330  0AC7               	incf	___awdiv@quotient+1,f
  1478  0331                     l1788:	
  1479  0331  0847               	movf	___awdiv@quotient+1,w
  1480  0332  01C0               	clrf	?___awdiv+1
  1481  0333  07C0               	addwf	?___awdiv+1,f
  1482  0334  0846               	movf	___awdiv@quotient,w
  1483  0335  01BF               	clrf	?___awdiv
  1484  0336  07BF               	addwf	?___awdiv,f
  1485  0337  0008               	return
  1486  0338                     __end_of___awdiv:	
  1487                           
  1488                           	psect	text3
  1489  04AD                     __ptext3:	
  1490 ;; *************** function _GetIrAN *****************
  1491 ;; Defined at:
  1492 ;;		line 90 in file "sur/Main.c"
  1493 ;; Parameters:    Size  Location     Type
  1494 ;;		None
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;  AN              1    5[COMMON] unsigned char 
  1497 ;; Return value:  Size  Location     Type
  1498 ;;                  1    wreg      unsigned char 
  1499 ;; Registers used:
  1500 ;;		wreg, status,2, status,0
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMMON   BANK0   BANK1
  1506 ;;      Params:         0       0       0
  1507 ;;      Locals:         1       0       0
  1508 ;;      Temps:          1       0       0
  1509 ;;      Totals:         2       0       0
  1510 ;;Total ram usage:        2 bytes
  1511 ;; Hardware stack levels used:    1
  1512 ;; Hardware stack levels required when called:    2
  1513 ;; This function calls:
  1514 ;;		Nothing
  1515 ;; This function is called by:
  1516 ;;		_TimeBase
  1517 ;; This function uses a non-reentrant model
  1518 ;;
  1519                           
  1520                           
  1521                           ;psect for function _GetIrAN
  1522  04AD                     _GetIrAN:	
  1523                           
  1524                           ;Main.c: 92: static unsigned char cnt1=0,cnt2=0;
  1525                           ;Main.c: 93: unsigned char AN=0;
  1526                           
  1527                           ;incstack = 0
  1528                           ; Regs used in _GetIrAN: [wreg+status,2+status,0]
  1529  04AD  01F7               	clrf	GetIrAN@AN
  1530                           
  1531                           ;Main.c: 94: if(PORTAbits.RA4==1)
  1532  04AE  0020               	movlb	0	; select bank0
  1533  04AF  1E0C               	btfss	12,4	;volatile
  1534  04B0  2CBC               	goto	l1624
  1535                           
  1536                           ;Main.c: 95: {
  1537                           ;Main.c: 96: cnt2=0;
  1538  04B1  01B2               	clrf	GetIrAN@cnt2
  1539                           
  1540                           ;Main.c: 97: if(cnt1++>10) AN=0x80;
  1541  04B2  3001               	movlw	1
  1542  04B3  00F6               	movwf	??_GetIrAN
  1543  04B4  0876               	movf	??_GetIrAN,w
  1544  04B5  07B1               	addwf	GetIrAN@cnt1,f
  1545  04B6  300C               	movlw	12
  1546  04B7  0231               	subwf	GetIrAN@cnt1,w
  1547  04B8  1C03               	skipc
  1548  04B9  2CC9               	goto	l158
  1549  04BA  3080               	movlw	128
  1550  04BB  2CC6               	goto	L1
  1551  04BC                     l1624:	
  1552                           ;Main.c: 98: }
  1553                           
  1554                           
  1555                           ;Main.c: 99: else
  1556                           ;Main.c: 100: {
  1557                           ;Main.c: 101: cnt1=0;
  1558  04BC  01B1               	clrf	GetIrAN@cnt1
  1559                           
  1560                           ;Main.c: 102: if(cnt2++>10) AN=0xF0;
  1561  04BD  3001               	movlw	1
  1562  04BE  00F6               	movwf	??_GetIrAN
  1563  04BF  0876               	movf	??_GetIrAN,w
  1564  04C0  07B2               	addwf	GetIrAN@cnt2,f
  1565  04C1  300C               	movlw	12
  1566  04C2  0232               	subwf	GetIrAN@cnt2,w
  1567  04C3  1C03               	skipc
  1568  04C4  2CC9               	goto	l158
  1569  04C5  30F0               	movlw	240
  1570  04C6                     L1:	
  1571  04C6  00F6               	movwf	??_GetIrAN
  1572  04C7  0876               	movf	??_GetIrAN,w
  1573  04C8  00F7               	movwf	GetIrAN@AN
  1574  04C9                     l158:	
  1575                           
  1576                           ;Main.c: 103: }
  1577                           ;Main.c: 104: return AN;
  1578  04C9  0877               	movf	GetIrAN@AN,w
  1579  04CA  0008               	return
  1580  04CB                     __end_of_GetIrAN:	
  1581                           
  1582                           	psect	text4
  1583  0058                     __ptext4:	
  1584 ;; *************** function _IrDeal *****************
  1585 ;; Defined at:
  1586 ;;		line 161 in file "sur/Main.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;		None
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;		None
  1591 ;; Return value:  Size  Location     Type
  1592 ;;		None               void
  1593 ;; Registers used:
  1594 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1595 ;; Tracked objects:
  1596 ;;		On entry : 0/0
  1597 ;;		On exit  : 0/0
  1598 ;;		Unchanged: 0/0
  1599 ;; Data sizes:     COMMON   BANK0   BANK1
  1600 ;;      Params:         0       0       0
  1601 ;;      Locals:         0       0       0
  1602 ;;      Temps:          0       2       0
  1603 ;;      Totals:         0       2       0
  1604 ;;Total ram usage:        2 bytes
  1605 ;; Hardware stack levels used:    1
  1606 ;; Hardware stack levels required when called:    4
  1607 ;; This function calls:
  1608 ;;		_BzSet
  1609 ;;		_ReadDataFromFlash
  1610 ;;		_SaveDataToFlash
  1611 ;;		_WritePwmPercentage
  1612 ;;		___wmul
  1613 ;; This function is called by:
  1614 ;;		_main
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           
  1619                           ;psect for function _IrDeal
  1620  0058                     _IrDeal:	
  1621                           
  1622                           ;Main.c: 164: static bit Night=0;
  1623                           ;Main.c: 166: if(IrAn!=IrData.Buf4 || CCT==1)
  1624                           
  1625                           ;incstack = 0
  1626                           ; Regs used in _IrDeal: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1627  0058  0020               	movlb	0	; select bank0
  1628  0059  082A               	movf	_IrData+3,w	;volatile
  1629  005A  0635               	xorwf	_IrAn,w
  1630  005B  1D03               	skipz
  1631  005C  0008               	return
  1632  005D  18F0               	btfsc	_CCT/(0+8),_CCT& (0+7)
  1633  005E  0008               	return
  1634  005F  28FA               	goto	l2004
  1635  0060                     l1924:	
  1636                           ;Main.c: 170: {
  1637                           ;Main.c: 171: case 0x30:
  1638                           
  1639                           ;Main.c: 169: switch(IrData.Buf2)
  1640                           
  1641                           ;Main.c: 167: return;
  1642                           
  1643                           
  1644                           ;Main.c: 172: {
  1645                           ;Main.c: 173: if(TimingNum==0){TimingNum=1800; BzSet(1,1000);}
  1646  0060  0830               	movf	_TimingNum+1,w
  1647  0061  042F               	iorwf	_TimingNum,w
  1648  0062  1D03               	skipz
  1649  0063  286F               	goto	l1930
  1650  0064  3008               	movlw	8
  1651  0065  00AF               	movwf	_TimingNum
  1652  0066  3007               	movlw	7
  1653  0067  00B0               	movwf	_TimingNum+1
  1654  0068  30E8               	movlw	232
  1655  0069  00F6               	movwf	BzSet@Long
  1656  006A  3003               	movlw	3
  1657  006B  00F7               	movwf	BzSet@Long+1
  1658  006C  3001               	movlw	1
  1659  006D  252D               	fcall	_BzSet
  1660  006E  2915               	goto	l192
  1661  006F                     l1930:	
  1662                           
  1663                           ;Main.c: 174: else
  1664                           ;Main.c: 175: {
  1665                           ;Main.c: 176: TimingNum=0;
  1666  006F  0020               	movlb	0	; select bank0
  1667  0070  01AF               	clrf	_TimingNum
  1668  0071  01B0               	clrf	_TimingNum+1
  1669                           
  1670                           ;Main.c: 177: TimingCnt=0;
  1671  0072  01AD               	clrf	_TimingCnt
  1672  0073  01AE               	clrf	_TimingCnt+1
  1673                           
  1674                           ;Main.c: 178: BzSet(2,1000);
  1675  0074  30E8               	movlw	232
  1676  0075  00F6               	movwf	BzSet@Long
  1677  0076  3003               	movlw	3
  1678  0077  00F7               	movwf	BzSet@Long+1
  1679  0078  3002               	movlw	2
  1680  0079  252D               	fcall	_BzSet
  1681                           
  1682                           ;Main.c: 179: }
  1683                           ;Main.c: 180: break;
  1684  007A  2915               	goto	l192
  1685  007B                     l1934:	
  1686                           ;Main.c: 181: }
  1687                           ;Main.c: 182: case 0xD0:
  1688                           
  1689                           
  1690                           ;Main.c: 183: {
  1691                           ;Main.c: 184: if(TimingNum==0){TimingNum=3600; BzSet(1,1000);}
  1692  007B  0020               	movlb	0	; select bank0
  1693  007C  0830               	movf	_TimingNum+1,w
  1694  007D  042F               	iorwf	_TimingNum,w
  1695  007E  1D03               	skipz
  1696  007F  288B               	goto	l1940
  1697  0080  3010               	movlw	16
  1698  0081  00AF               	movwf	_TimingNum
  1699  0082  300E               	movlw	14
  1700  0083  00B0               	movwf	_TimingNum+1
  1701  0084  30E8               	movlw	232
  1702  0085  00F6               	movwf	BzSet@Long
  1703  0086  3003               	movlw	3
  1704  0087  00F7               	movwf	BzSet@Long+1
  1705  0088  3001               	movlw	1
  1706  0089  252D               	fcall	_BzSet
  1707  008A  2915               	goto	l192
  1708  008B                     l1940:	
  1709                           
  1710                           ;Main.c: 185: else
  1711                           ;Main.c: 186: {
  1712                           ;Main.c: 187: TimingNum=0;
  1713  008B  0020               	movlb	0	; select bank0
  1714  008C  01AF               	clrf	_TimingNum
  1715  008D  01B0               	clrf	_TimingNum+1
  1716                           
  1717                           ;Main.c: 188: TimingCnt=0;
  1718  008E  01AD               	clrf	_TimingCnt
  1719  008F  01AE               	clrf	_TimingCnt+1
  1720                           
  1721                           ;Main.c: 189: BzSet(2,1000);
  1722  0090  30E8               	movlw	232
  1723  0091  00F6               	movwf	BzSet@Long
  1724  0092  3003               	movlw	3
  1725  0093  00F7               	movwf	BzSet@Long+1
  1726  0094  3002               	movlw	2
  1727  0095  252D               	fcall	_BzSet
  1728                           
  1729                           ;Main.c: 190: }
  1730                           ;Main.c: 191: break;
  1731  0096  2915               	goto	l192
  1732  0097                     l1944:	
  1733                           ;Main.c: 192: }
  1734                           ;Main.c: 193: case 0x10:
  1735                           
  1736                           
  1737                           ;Main.c: 194: {
  1738                           ;Main.c: 196: DimmingNum=56;
  1739  0097  3038               	movlw	56
  1740  0098  0020               	movlb	0	; select bank0
  1741  0099  00C4               	movwf	??_IrDeal
  1742  009A  0844               	movf	??_IrDeal,w
  1743  009B  00F8               	movwf	_DimmingNum
  1744                           
  1745                           ;Main.c: 197: Night=0;
  1746  009C  1070               	bcf	IrDeal@Night/(0+8),IrDeal@Night& (0+7)
  1747                           
  1748                           ;Main.c: 198: SaveDataToFlash();
  1749  009D  238A               	fcall	_SaveDataToFlash
  1750                           
  1751                           ;Main.c: 199: BzSet(1,1000);
  1752  009E  30E8               	movlw	232
  1753  009F  00F6               	movwf	BzSet@Long
  1754  00A0  3003               	movlw	3
  1755  00A1  00F7               	movwf	BzSet@Long+1
  1756  00A2  3001               	movlw	1
  1757  00A3  252D               	fcall	_BzSet
  1758                           
  1759                           ;Main.c: 200: break;
  1760  00A4  2915               	goto	l192
  1761  00A5                     l1952:	
  1762                           ;Main.c: 201: }
  1763                           ;Main.c: 202: case 0x90:
  1764                           
  1765                           
  1766                           ;Main.c: 203: {
  1767                           ;Main.c: 205: DimmingNum=43;
  1768  00A5  302B               	movlw	43
  1769  00A6  0020               	movlb	0	; select bank0
  1770  00A7  00C4               	movwf	??_IrDeal
  1771  00A8  0844               	movf	??_IrDeal,w
  1772  00A9  00F8               	movwf	_DimmingNum
  1773                           
  1774                           ;Main.c: 206: Night=0;
  1775  00AA  1070               	bcf	IrDeal@Night/(0+8),IrDeal@Night& (0+7)
  1776                           
  1777                           ;Main.c: 207: SaveDataToFlash();
  1778  00AB  238A               	fcall	_SaveDataToFlash
  1779                           
  1780                           ;Main.c: 208: BzSet(1,1000);
  1781  00AC  30E8               	movlw	232
  1782  00AD  00F6               	movwf	BzSet@Long
  1783  00AE  3003               	movlw	3
  1784  00AF  00F7               	movwf	BzSet@Long+1
  1785  00B0  3001               	movlw	1
  1786  00B1  252D               	fcall	_BzSet
  1787                           
  1788                           ;Main.c: 209: break;
  1789  00B2  2915               	goto	l192
  1790  00B3                     l1960:	
  1791                           ;Main.c: 210: }
  1792                           ;Main.c: 211: case 0x50:
  1793                           
  1794                           
  1795                           ;Main.c: 212: {
  1796                           ;Main.c: 214: DimmingNum=35;
  1797  00B3  3023               	movlw	35
  1798  00B4  0020               	movlb	0	; select bank0
  1799  00B5  00C4               	movwf	??_IrDeal
  1800  00B6  0844               	movf	??_IrDeal,w
  1801  00B7  00F8               	movwf	_DimmingNum
  1802                           
  1803                           ;Main.c: 215: Night=0;
  1804  00B8  1070               	bcf	IrDeal@Night/(0+8),IrDeal@Night& (0+7)
  1805                           
  1806                           ;Main.c: 216: SaveDataToFlash();
  1807  00B9  238A               	fcall	_SaveDataToFlash
  1808                           
  1809                           ;Main.c: 217: BzSet(1,1000);
  1810  00BA  30E8               	movlw	232
  1811  00BB  00F6               	movwf	BzSet@Long
  1812  00BC  3003               	movlw	3
  1813  00BD  00F7               	movwf	BzSet@Long+1
  1814  00BE  3001               	movlw	1
  1815  00BF  252D               	fcall	_BzSet
  1816                           
  1817                           ;Main.c: 218: break;
  1818  00C0  2915               	goto	l192
  1819  00C1                     l1968:	
  1820                           ;Main.c: 219: }
  1821                           ;Main.c: 220: case 0x70:
  1822                           
  1823                           
  1824                           ;Main.c: 221: {
  1825                           ;Main.c: 222: DimmingBack=DimmingNum;
  1826  00C1  0878               	movf	_DimmingNum,w
  1827  00C2  0020               	movlb	0	; select bank0
  1828  00C3  00C4               	movwf	??_IrDeal
  1829  00C4  0844               	movf	??_IrDeal,w
  1830  00C5  00B3               	movwf	_DimmingBack
  1831                           
  1832                           ;Main.c: 223: CCT=1;
  1833  00C6  14F0               	bsf	_CCT/(0+8),_CCT& (0+7)
  1834                           
  1835                           ;Main.c: 228: BzSet(1,1000);
  1836  00C7  30E8               	movlw	232
  1837  00C8  00F6               	movwf	BzSet@Long
  1838  00C9  3003               	movlw	3
  1839  00CA  00F7               	movwf	BzSet@Long+1
  1840  00CB  3001               	movlw	1
  1841  00CC  252D               	fcall	_BzSet
  1842                           
  1843                           ;Main.c: 229: break;
  1844  00CD  2915               	goto	l192
  1845  00CE                     l200:	
  1846                           ;Main.c: 230: }
  1847                           ;Main.c: 231: case 0x40:
  1848                           
  1849                           
  1850                           ;Main.c: 232: {
  1851                           ;Main.c: 234: if(Night!=1)
  1852  00CE  1870               	btfsc	IrDeal@Night/(0+8),IrDeal@Night& (0+7)
  1853  00CF  28D9               	goto	l1980
  1854                           
  1855                           ;Main.c: 235: {
  1856                           ;Main.c: 236: DimmingNum=0;
  1857  00D0  01F8               	clrf	_DimmingNum
  1858                           
  1859                           ;Main.c: 237: Night=1;
  1860  00D1  1470               	bsf	IrDeal@Night/(0+8),IrDeal@Night& (0+7)
  1861                           
  1862                           ;Main.c: 238: BzSet(1,1000);
  1863  00D2  30E8               	movlw	232
  1864  00D3  00F6               	movwf	BzSet@Long
  1865  00D4  3003               	movlw	3
  1866  00D5  00F7               	movwf	BzSet@Long+1
  1867  00D6  3001               	movlw	1
  1868  00D7  252D               	fcall	_BzSet
  1869                           
  1870                           ;Main.c: 239: }
  1871  00D8  2915               	goto	l192
  1872  00D9                     l1980:	
  1873                           
  1874                           ;Main.c: 240: else
  1875                           ;Main.c: 241: {
  1876                           ;Main.c: 242: DimmingNum=0;
  1877  00D9  01F8               	clrf	_DimmingNum
  1878                           
  1879                           ;Main.c: 243: Night=0;
  1880  00DA  1070               	bcf	IrDeal@Night/(0+8),IrDeal@Night& (0+7)
  1881                           
  1882                           ;Main.c: 244: BzSet(1,1000);
  1883  00DB  30E8               	movlw	232
  1884  00DC  00F6               	movwf	BzSet@Long
  1885  00DD  3003               	movlw	3
  1886  00DE  00F7               	movwf	BzSet@Long+1
  1887  00DF  3001               	movlw	1
  1888  00E0  252D               	fcall	_BzSet
  1889                           
  1890                           ;Main.c: 245: }
  1891                           ;Main.c: 246: break;
  1892  00E1  2915               	goto	l192
  1893  00E2                     l1986:	
  1894                           ;Main.c: 247: }
  1895                           ;Main.c: 248: case 0x80:
  1896                           
  1897                           
  1898                           ;Main.c: 249: {
  1899                           ;Main.c: 251: if(DimmingNum==0)
  1900  00E2  08F8               	movf	_DimmingNum,f
  1901  00E3  1D03               	skipz
  1902  00E4  28F1               	goto	l1996
  1903                           
  1904                           ;Main.c: 252: {
  1905                           ;Main.c: 253: TimingNum=0;
  1906  00E5  0020               	movlb	0	; select bank0
  1907  00E6  01AF               	clrf	_TimingNum
  1908  00E7  01B0               	clrf	_TimingNum+1
  1909                           
  1910                           ;Main.c: 254: Night=0;
  1911  00E8  1070               	bcf	IrDeal@Night/(0+8),IrDeal@Night& (0+7)
  1912                           
  1913                           ;Main.c: 255: ReadDataFromFlash();
  1914  00E9  23D8               	fcall	_ReadDataFromFlash
  1915                           
  1916                           ;Main.c: 256: BzSet(1,1000);
  1917  00EA  30E8               	movlw	232
  1918  00EB  00F6               	movwf	BzSet@Long
  1919  00EC  3003               	movlw	3
  1920  00ED  00F7               	movwf	BzSet@Long+1
  1921  00EE  3001               	movlw	1
  1922  00EF  252D               	fcall	_BzSet
  1923                           
  1924                           ;Main.c: 257: }
  1925  00F0  2915               	goto	l192
  1926  00F1                     l1996:	
  1927                           
  1928                           ;Main.c: 258: else
  1929                           ;Main.c: 259: {
  1930                           ;Main.c: 260: DimmingNum=0;
  1931  00F1  01F8               	clrf	_DimmingNum
  1932                           
  1933                           ;Main.c: 261: Night=0;
  1934  00F2  1070               	bcf	IrDeal@Night/(0+8),IrDeal@Night& (0+7)
  1935                           
  1936                           ;Main.c: 262: BzSet(1,1000);
  1937  00F3  30E8               	movlw	232
  1938  00F4  00F6               	movwf	BzSet@Long
  1939  00F5  3003               	movlw	3
  1940  00F6  00F7               	movwf	BzSet@Long+1
  1941  00F7  3001               	movlw	1
  1942  00F8  252D               	fcall	_BzSet
  1943                           
  1944                           ;Main.c: 263: }
  1945                           ;Main.c: 264: break;
  1946  00F9  2915               	goto	l192
  1947  00FA                     l2004:	
  1948                           ;Main.c: 267: }
  1949                           
  1950                           ;Main.c: 265: }
  1951                           ;Main.c: 266: default: return;
  1952                           
  1953  00FA  0020               	movlb	0	; select bank0
  1954  00FB  0828               	movf	_IrData+1,w	;volatile
  1955                           
  1956                           ; Switch size 1, requested type "space"
  1957                           ; Number of cases is 8, Range of values is 16 to 208
  1958                           ; switch strategies available:
  1959                           ; Name         Instructions Cycles
  1960                           ; simple_byte           25    13 (average)
  1961                           ; jumptable            263     9 (fixed)
  1962                           ;	Chosen strategy is simple_byte
  1963  00FC  3A10               	xorlw	16	; case 16
  1964  00FD  1903               	skipnz
  1965  00FE  2897               	goto	l1944
  1966  00FF  3A20               	xorlw	32	; case 48
  1967  0100  1903               	skipnz
  1968  0101  2860               	goto	l1924
  1969  0102  3A70               	xorlw	112	; case 64
  1970  0103  1903               	skipnz
  1971  0104  28CE               	goto	l200
  1972  0105  3A10               	xorlw	16	; case 80
  1973  0106  1903               	skipnz
  1974  0107  28B3               	goto	l1960
  1975  0108  3A20               	xorlw	32	; case 112
  1976  0109  1903               	skipnz
  1977  010A  28C1               	goto	l1968
  1978  010B  3AF0               	xorlw	240	; case 128
  1979  010C  1903               	skipnz
  1980  010D  28E2               	goto	l1986
  1981  010E  3A10               	xorlw	16	; case 144
  1982  010F  1903               	skipnz
  1983  0110  28A5               	goto	l1952
  1984  0111  3A40               	xorlw	64	; case 208
  1985  0112  1903               	skipnz
  1986  0113  287B               	goto	l1934
  1987  0114  2931               	goto	l187
  1988  0115                     l192:	
  1989                           
  1990                           ;Main.c: 268: PORTCbits.RC0=Night;
  1991  0115  1C70               	btfss	IrDeal@Night/(0+8),IrDeal@Night& (0+7)
  1992  0116  291A               	goto	u2020
  1993  0117  0020               	movlb	0	; select bank0
  1994  0118  140E               	bsf	14,0	;volatile
  1995  0119  291C               	goto	l2006
  1996  011A                     u2020:	
  1997  011A  0020               	movlb	0	; select bank0
  1998  011B  100E               	bcf	14,0	;volatile
  1999  011C                     l2006:	
  2000                           
  2001                           ;Main.c: 269: WritePwmPercentage(2,DimmingNum*5);
  2002  011C  0878               	movf	_DimmingNum,w
  2003  011D  00C4               	movwf	??_IrDeal
  2004  011E  01C5               	clrf	??_IrDeal+1
  2005  011F  0844               	movf	??_IrDeal,w
  2006  0120  00BB               	movwf	___wmul@multiplier
  2007  0121  0845               	movf	??_IrDeal+1,w
  2008  0122  00BC               	movwf	___wmul@multiplier+1
  2009  0123  3005               	movlw	5
  2010  0124  00BD               	movwf	___wmul@multiplicand
  2011  0125  3000               	movlw	0
  2012  0126  00BE               	movwf	___wmul@multiplicand+1
  2013  0127  24CB               	fcall	___wmul
  2014  0128  0020               	movlb	0	; select bank0
  2015  0129  083C               	movf	?___wmul+1,w
  2016  012A  01C0               	clrf	WritePwmPercentage@Percentage+1
  2017  012B  07C0               	addwf	WritePwmPercentage@Percentage+1,f
  2018  012C  083B               	movf	?___wmul,w
  2019  012D  01BF               	clrf	WritePwmPercentage@Percentage
  2020  012E  07BF               	addwf	WritePwmPercentage@Percentage,f
  2021  012F  3002               	movlw	2
  2022  0130  2268               	fcall	_WritePwmPercentage
  2023  0131                     l187:	
  2024  0131  0008               	return
  2025  0132                     __end_of_IrDeal:	
  2026                           
  2027                           	psect	text5
  2028  04CB                     __ptext5:	
  2029 ;; *************** function ___wmul *****************
  2030 ;; Defined at:
  2031 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.30\sources\common\wmul.c"
  2032 ;; Parameters:    Size  Location     Type
  2033 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2034 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;  product         2    4[COMMON] unsigned int 
  2037 ;; Return value:  Size  Location     Type
  2038 ;;                  2    0[BANK0 ] unsigned int 
  2039 ;; Registers used:
  2040 ;;		wreg, status,2, status,0
  2041 ;; Tracked objects:
  2042 ;;		On entry : 0/0
  2043 ;;		On exit  : 0/0
  2044 ;;		Unchanged: 0/0
  2045 ;; Data sizes:     COMMON   BANK0   BANK1
  2046 ;;      Params:         0       4       0
  2047 ;;      Locals:         2       0       0
  2048 ;;      Temps:          0       0       0
  2049 ;;      Totals:         2       4       0
  2050 ;;Total ram usage:        6 bytes
  2051 ;; Hardware stack levels used:    1
  2052 ;; Hardware stack levels required when called:    2
  2053 ;; This function calls:
  2054 ;;		Nothing
  2055 ;; This function is called by:
  2056 ;;		_InitPowerOn
  2057 ;;		_IrDeal
  2058 ;;		_TimeBase
  2059 ;; This function uses a non-reentrant model
  2060 ;;
  2061                           
  2062                           
  2063                           ;psect for function ___wmul
  2064  04CB                     ___wmul:	
  2065                           
  2066                           ;incstack = 0
  2067                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2068  04CB  01F6               	clrf	___wmul@product
  2069  04CC  01F7               	clrf	___wmul@product+1
  2070  04CD                     l2142:	
  2071  04CD  0020               	movlb	0	; select bank0
  2072  04CE  1C3B               	btfss	___wmul@multiplier,0
  2073  04CF  2CD4               	goto	l654
  2074  04D0  083D               	movf	___wmul@multiplicand,w
  2075  04D1  07F6               	addwf	___wmul@product,f
  2076  04D2  083E               	movf	___wmul@multiplicand+1,w
  2077  04D3  3DF7               	addwfc	___wmul@product+1,f
  2078  04D4                     l654:	
  2079  04D4  3001               	movlw	1
  2080  04D5                     u2175:	
  2081  04D5  35BD               	lslf	___wmul@multiplicand,f
  2082  04D6  0DBE               	rlf	___wmul@multiplicand+1,f
  2083  04D7  0B89               	decfsz	9,f
  2084  04D8  2CD5               	goto	u2175
  2085  04D9  3001               	movlw	1
  2086  04DA                     u2185:	
  2087  04DA  36BC               	lsrf	___wmul@multiplier+1,f
  2088  04DB  0CBB               	rrf	___wmul@multiplier,f
  2089  04DC  0B89               	decfsz	9,f
  2090  04DD  2CDA               	goto	u2185
  2091  04DE  083C               	movf	___wmul@multiplier+1,w
  2092  04DF  043B               	iorwf	___wmul@multiplier,w
  2093  04E0  1D03               	skipz
  2094  04E1  2CCD               	goto	l2142
  2095  04E2  0877               	movf	___wmul@product+1,w
  2096  04E3  01BC               	clrf	?___wmul+1
  2097  04E4  07BC               	addwf	?___wmul+1,f
  2098  04E5  0876               	movf	___wmul@product,w
  2099  04E6  01BB               	clrf	?___wmul
  2100  04E7  07BB               	addwf	?___wmul,f
  2101  04E8  0008               	return
  2102  04E9                     __end_of___wmul:	
  2103                           
  2104                           	psect	text6
  2105  038A                     __ptext6:	
  2106 ;; *************** function _SaveDataToFlash *****************
  2107 ;; Defined at:
  2108 ;;		line 109 in file "sur/Main.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;		None
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;  AddrTemp        1    8[BANK0 ] unsigned char 
  2113 ;; Return value:  Size  Location     Type
  2114 ;;		None               void
  2115 ;; Registers used:
  2116 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMMON   BANK0   BANK1
  2122 ;;      Params:         0       0       0
  2123 ;;      Locals:         0       1       0
  2124 ;;      Temps:          0       2       0
  2125 ;;      Totals:         0       3       0
  2126 ;;Total ram usage:        3 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:    3
  2129 ;; This function calls:
  2130 ;;		_flash_memory_erase
  2131 ;;		_flash_memory_read
  2132 ;;		_flash_memory_write
  2133 ;; This function is called by:
  2134 ;;		_IrDeal
  2135 ;;		_TimeBase
  2136 ;; This function uses a non-reentrant model
  2137 ;;
  2138                           
  2139                           
  2140                           ;psect for function _SaveDataToFlash
  2141  038A                     _SaveDataToFlash:	
  2142                           
  2143                           ;Main.c: 111: unsigned char AddrTemp;
  2144                           ;Main.c: 112: AddrTemp=flash_memory_read(96);
  2145                           
  2146                           ;incstack = 0
  2147                           ; Regs used in _SaveDataToFlash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2148  038A  3060               	movlw	96
  2149  038B  248E               	fcall	_flash_memory_read
  2150  038C  0020               	movlb	0	; select bank0
  2151  038D  00C1               	movwf	??_SaveDataToFlash
  2152  038E  0841               	movf	??_SaveDataToFlash,w
  2153  038F  00C3               	movwf	SaveDataToFlash@AddrTemp
  2154                           
  2155                           ;Main.c: 113: if(DimmingNumBackup!=DimmingNum || ColorTemperatureBack!=ColorTemperature)
  2156  0390  0834               	movf	_DimmingNumBackup,w
  2157  0391  0678               	xorwf	_DimmingNum,w
  2158  0392  1D03               	skipz
  2159  0393  2BA2               	goto	l2030
  2160  0394  1D70               	btfss	_ColorTemperature/(0+8),_ColorTemperature& (0+7)
  2161  0395  2B98               	goto	u2090
  2162  0396  3001               	movlw	1
  2163  0397  2B99               	goto	u2092
  2164  0398                     u2090:	
  2165  0398  3000               	movlw	0
  2166  0399                     u2092:	
  2167  0399  00C1               	movwf	??_SaveDataToFlash
  2168  039A  1DF0               	btfss	_ColorTemperatureBack/(0+8),_ColorTemperatureBack& (0+7)
  2169  039B  2B9E               	goto	u2100
  2170  039C  3001               	movlw	1
  2171  039D  2B9F               	goto	u2102
  2172  039E                     u2100:	
  2173  039E  3000               	movlw	0
  2174  039F                     u2102:	
  2175  039F  0641               	xorwf	??_SaveDataToFlash,w
  2176  03A0  1903               	skipnz
  2177  03A1  0008               	return
  2178  03A2                     l2030:	
  2179                           
  2180                           ;Main.c: 114: {
  2181                           ;Main.c: 115: if(AddrTemp>=15)
  2182  03A2  300F               	movlw	15
  2183  03A3  0243               	subwf	SaveDataToFlash@AddrTemp,w
  2184  03A4  1C03               	skipc
  2185  03A5  2BA9               	goto	l2034
  2186                           
  2187                           ;Main.c: 116: {
  2188                           ;Main.c: 117: AddrTemp=1;
  2189  03A6  01C3               	clrf	SaveDataToFlash@AddrTemp
  2190  03A7  0AC3               	incf	SaveDataToFlash@AddrTemp,f
  2191                           
  2192                           ;Main.c: 118: }
  2193  03A8  2BAD               	goto	l2036
  2194  03A9                     l2034:	
  2195                           
  2196                           ;Main.c: 119: else
  2197                           ;Main.c: 120: {
  2198                           ;Main.c: 121: AddrTemp+=1;
  2199  03A9  3001               	movlw	1
  2200  03AA  00C1               	movwf	??_SaveDataToFlash
  2201  03AB  0841               	movf	??_SaveDataToFlash,w
  2202  03AC  07C3               	addwf	SaveDataToFlash@AddrTemp,f
  2203  03AD                     l2036:	
  2204                           
  2205                           ;Main.c: 122: }
  2206                           ;Main.c: 123: flash_memory_erase(6);
  2207  03AD  3006               	movlw	6
  2208  03AE  240C               	fcall	_flash_memory_erase
  2209                           
  2210                           ;Main.c: 124: flash_memory_erase(7);
  2211  03AF  3007               	movlw	7
  2212  03B0  240C               	fcall	_flash_memory_erase
  2213                           
  2214                           ;Main.c: 125: flash_memory_write(96, &AddrTemp,1);
  2215  03B1  3043               	movlw	SaveDataToFlash@AddrTemp& (0+255)
  2216  03B2  0020               	movlb	0	; select bank0
  2217  03B3  00C1               	movwf	??_SaveDataToFlash
  2218  03B4  0841               	movf	??_SaveDataToFlash,w
  2219  03B5  00F6               	movwf	flash_memory_write@data
  2220  03B6  01F7               	clrf	flash_memory_write@datalen
  2221  03B7  0AF7               	incf	flash_memory_write@datalen,f
  2222  03B8  3060               	movlw	96
  2223  03B9  2338               	fcall	_flash_memory_write
  2224                           
  2225                           ;Main.c: 126: Addr.byte0=DimmingNumBackup=DimmingNum;
  2226  03BA  0878               	movf	_DimmingNum,w
  2227  03BB  0020               	movlb	0	; select bank0
  2228  03BC  00B4               	movwf	_DimmingNumBackup
  2229  03BD  00C1               	movwf	??_SaveDataToFlash
  2230  03BE  0841               	movf	??_SaveDataToFlash,w
  2231  03BF  00B9               	movwf	_Addr
  2232                           
  2233                           ;Main.c: 127: Addr.byte1=ColorTemperatureBack=ColorTemperature;
  2234  03C0  11F0               	bcf	_ColorTemperatureBack/(0+8),_ColorTemperatureBack& (0+7)
  2235  03C1  1970               	btfsc	_ColorTemperature/(0+8),_ColorTemperature& (0+7)
  2236  03C2  15F0               	bsf	_ColorTemperatureBack/(0+8),_ColorTemperatureBack& (0+7)
  2237  03C3  3000               	movlw	0
  2238  03C4  19F0               	btfsc	_ColorTemperatureBack/(0+8),_ColorTemperatureBack& (0+7)
  2239  03C5  3001               	movlw	1
  2240  03C6  0020               	movlb	0	; select bank0
  2241  03C7  00BA               	movwf	_Addr+1
  2242                           
  2243                           ;Main.c: 128: AddrTemp=AddrTemp*2+96;
  2244  03C8  3543               	lslf	SaveDataToFlash@AddrTemp,w
  2245  03C9  3E60               	addlw	96
  2246  03CA  00C1               	movwf	??_SaveDataToFlash
  2247  03CB  0841               	movf	??_SaveDataToFlash,w
  2248  03CC  00C3               	movwf	SaveDataToFlash@AddrTemp
  2249                           
  2250                           ;Main.c: 129: flash_memory_write(AddrTemp,&Addr.Uint16,2);
  2251  03CD  3039               	movlw	_Addr& (0+255)
  2252  03CE  00C1               	movwf	??_SaveDataToFlash
  2253  03CF  0841               	movf	??_SaveDataToFlash,w
  2254  03D0  00F6               	movwf	flash_memory_write@data
  2255  03D1  3002               	movlw	2
  2256  03D2  00C2               	movwf	??_SaveDataToFlash+1
  2257  03D3  0842               	movf	??_SaveDataToFlash+1,w
  2258  03D4  00F7               	movwf	flash_memory_write@datalen
  2259  03D5  0843               	movf	SaveDataToFlash@AddrTemp,w
  2260  03D6  2338               	fcall	_flash_memory_write
  2261  03D7  0008               	return
  2262  03D8                     __end_of_SaveDataToFlash:	
  2263                           
  2264                           	psect	text7
  2265  0338                     __ptext7:	
  2266 ;; *************** function _flash_memory_write *****************
  2267 ;; Defined at:
  2268 ;;		line 75 in file "sur/flash_routines.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;  address         1    wreg     unsigned char 
  2271 ;;  data            1    4[COMMON] PTR unsigned char 
  2272 ;;		 -> Addr(2), SaveDataToFlash@AddrTemp(1), 
  2273 ;;  datalen         1    5[COMMON] unsigned char 
  2274 ;; Auto vars:     Size  Location     Type
  2275 ;;  address         1    2[BANK0 ] unsigned char 
  2276 ;;  AddrBuf         2    4[BANK0 ] unsigned int 
  2277 ;;  wdi             1    3[BANK0 ] unsigned char 
  2278 ;; Return value:  Size  Location     Type
  2279 ;;		None               void
  2280 ;; Registers used:
  2281 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMMON   BANK0   BANK1
  2287 ;;      Params:         2       0       0
  2288 ;;      Locals:         0       4       0
  2289 ;;      Temps:          0       2       0
  2290 ;;      Totals:         2       6       0
  2291 ;;Total ram usage:        8 bytes
  2292 ;; Hardware stack levels used:    1
  2293 ;; Hardware stack levels required when called:    2
  2294 ;; This function calls:
  2295 ;;		Nothing
  2296 ;; This function is called by:
  2297 ;;		_SaveDataToFlash
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           
  2302                           ;psect for function _flash_memory_write
  2303  0338                     _flash_memory_write:	
  2304                           
  2305                           ;incstack = 0
  2306                           ; Regs used in _flash_memory_write: [wreg+fsr1l+fsr1h+status,2+status,0]
  2307                           ;flash_memory_write@address stored from wreg
  2308  0338  0020               	movlb	0	; select bank0
  2309  0339  00BD               	movwf	flash_memory_write@address
  2310                           
  2311                           ;flash_routines.c: 77: unsigned char wdi=0;
  2312  033A  01BE               	clrf	flash_memory_write@wdi
  2313                           
  2314                           ;flash_routines.c: 78: unsigned int AddrBuf;
  2315                           ;flash_routines.c: 79: if(datalen==0)
  2316  033B  08F7               	movf	flash_memory_write@datalen,f
  2317  033C  1903               	btfsc	3,2
  2318  033D  0008               	return
  2319                           
  2320                           ;flash_routines.c: 81: INTCONbits.GIE = 0;
  2321                           
  2322                           ;flash_routines.c: 80: return;
  2323  033E  138B               	bcf	11,7	;volatile
  2324                           
  2325                           ;flash_routines.c: 82: AddrBuf=0x0780;
  2326  033F  3080               	movlw	128
  2327  0340  00BF               	movwf	flash_memory_write@AddrBuf
  2328  0341  3007               	movlw	7
  2329  0342  00C0               	movwf	flash_memory_write@AddrBuf+1
  2330                           
  2331                           ;flash_routines.c: 83: AddrBuf+=address;
  2332  0343  083D               	movf	flash_memory_write@address,w
  2333  0344  00BB               	movwf	??_flash_memory_write
  2334  0345  01BC               	clrf	??_flash_memory_write+1
  2335  0346  083B               	movf	??_flash_memory_write,w
  2336  0347  07BF               	addwf	flash_memory_write@AddrBuf,f
  2337  0348  083C               	movf	??_flash_memory_write+1,w
  2338  0349  3DC0               	addwfc	flash_memory_write@AddrBuf+1,f
  2339                           
  2340                           ;flash_routines.c: 84: PMADRL=((AddrBuf)&0xff);
  2341  034A  083F               	movf	flash_memory_write@AddrBuf,w
  2342  034B  0023               	movlb	3	; select bank3
  2343  034C  0091               	movwf	17	;volatile
  2344                           
  2345                           ;flash_routines.c: 85: PMADRH=((AddrBuf)>>8);
  2346  034D  0020               	movlb	0	; select bank0
  2347  034E  0840               	movf	flash_memory_write@AddrBuf+1,w
  2348  034F  0023               	movlb	3	; select bank3
  2349  0350  0092               	movwf	18	;volatile
  2350                           
  2351                           ;flash_routines.c: 86: PMCON1bits.CFGS = 0;
  2352  0351  1315               	bcf	21,6	;volatile
  2353                           
  2354                           ;flash_routines.c: 87: PMCON1bits.FREE = 0;
  2355  0352  1215               	bcf	21,4	;volatile
  2356                           
  2357                           ;flash_routines.c: 88: PMCON1bits.LWLO = 1;
  2358  0353  1695               	bsf	21,5	;volatile
  2359                           
  2360                           ;flash_routines.c: 89: PMCON1bits.WREN = 1;
  2361  0354  1515               	bsf	21,2	;volatile
  2362  0355                     l295:	
  2363                           ;flash_routines.c: 91: while(1)
  2364                           
  2365                           
  2366                           ;flash_routines.c: 92: {
  2367                           ;flash_routines.c: 93: PMDATH = 0x00;
  2368  0355  0023               	movlb	3	; select bank3
  2369  0356  0194               	clrf	20	;volatile
  2370                           
  2371                           ;flash_routines.c: 94: PMDATL = data[wdi];
  2372  0357  0020               	movlb	0	; select bank0
  2373  0358  083E               	movf	flash_memory_write@wdi,w
  2374  0359  0776               	addwf	flash_memory_write@data,w
  2375  035A  00BB               	movwf	??_flash_memory_write
  2376  035B  083B               	movf	??_flash_memory_write,w
  2377  035C  0086               	movwf	6
  2378  035D  0187               	clrf	7
  2379  035E  0801               	movf	1,w
  2380  035F  0023               	movlb	3	; select bank3
  2381  0360  0093               	movwf	19	;volatile
  2382                           
  2383                           ;flash_routines.c: 97: PMCON2 = 0x55;
  2384  0361  3055               	movlw	85
  2385  0362  0096               	movwf	22	;volatile
  2386                           
  2387                           ;flash_routines.c: 98: PMCON2 = 0xAA;
  2388  0363  30AA               	movlw	170
  2389  0364  0096               	movwf	22	;volatile
  2390                           
  2391                           ;flash_routines.c: 99: PMCON1bits.WR = 1;
  2392  0365  1495               	bsf	21,1	;volatile
  2393  0366  0000               	nop	; ;# 
  2394  0367  0000               	nop	; ;# 
  2395  0368  0000               	nop	; ;# 
  2396  0369  0000               	nop	; ;# 
  2397                           
  2398                           ;flash_routines.c: 106: datalen-=1;
  2399  036A  3001               	movlw	1
  2400  036B  02F7               	subwf	flash_memory_write@datalen,f
  2401                           
  2402                           ;flash_routines.c: 107: if(datalen==0)
  2403  036C  08F7               	movf	flash_memory_write@datalen,f
  2404  036D  1903               	btfsc	3,2
  2405  036E  2B7B               	goto	l297
  2406                           
  2407                           ;flash_routines.c: 109: PMADRL++;
  2408                           
  2409                           ;flash_routines.c: 108: break;
  2410  036F  3001               	movlw	1
  2411  0370  0020               	movlb	0	; select bank0
  2412  0371  00BB               	movwf	??_flash_memory_write
  2413  0372  083B               	movf	??_flash_memory_write,w
  2414  0373  0023               	movlb	3	; select bank3
  2415  0374  0791               	addwf	17,f	;volatile
  2416                           
  2417                           ;flash_routines.c: 110: wdi++;
  2418  0375  3001               	movlw	1
  2419  0376  0020               	movlb	0	; select bank0
  2420  0377  00BB               	movwf	??_flash_memory_write
  2421  0378  083B               	movf	??_flash_memory_write,w
  2422  0379  07BE               	addwf	flash_memory_write@wdi,f
  2423  037A  2B55               	goto	l295
  2424  037B                     l297:	
  2425                           
  2426                           ;flash_routines.c: 111: }
  2427                           ;flash_routines.c: 113: PMCON1bits.LWLO = 0;
  2428  037B  0023               	movlb	3	; select bank3
  2429  037C  1295               	bcf	21,5	;volatile
  2430                           
  2431                           ;flash_routines.c: 116: PMCON2 = 0x55;
  2432  037D  3055               	movlw	85
  2433  037E  0096               	movwf	22	;volatile
  2434                           
  2435                           ;flash_routines.c: 117: PMCON2 = 0xAA;
  2436  037F  30AA               	movlw	170
  2437  0380  0096               	movwf	22	;volatile
  2438                           
  2439                           ;flash_routines.c: 118: PMCON1bits.WR = 1;
  2440  0381  1495               	bsf	21,1	;volatile
  2441  0382  0000               	nop	; ;# 
  2442  0383  0000               	nop	; ;# 
  2443  0384  0000               	nop	; ;# 
  2444  0385  0000               	nop	; ;# 
  2445                           
  2446                           ;flash_routines.c: 126: PMCON1bits.WREN = 0;
  2447  0386  0023               	movlb	3	; select bank3
  2448  0387  1115               	bcf	21,2	;volatile
  2449                           
  2450                           ;flash_routines.c: 127: INTCONbits.GIE = 1;
  2451  0388  178B               	bsf	11,7	;volatile
  2452  0389  0008               	return
  2453  038A                     __end_of_flash_memory_write:	
  2454                           
  2455                           	psect	text8
  2456  040C                     __ptext8:	
  2457 ;; *************** function _flash_memory_erase *****************
  2458 ;; Defined at:
  2459 ;;		line 136 in file "sur/flash_routines.c"
  2460 ;; Parameters:    Size  Location     Type
  2461 ;;  Page            1    wreg     unsigned char 
  2462 ;; Auto vars:     Size  Location     Type
  2463 ;;  Page            1    0[BANK0 ] unsigned char 
  2464 ;;  AddrBuf         2    1[BANK0 ] unsigned int 
  2465 ;; Return value:  Size  Location     Type
  2466 ;;		None               void
  2467 ;; Registers used:
  2468 ;;		wreg, status,2
  2469 ;; Tracked objects:
  2470 ;;		On entry : 0/0
  2471 ;;		On exit  : 0/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMMON   BANK0   BANK1
  2474 ;;      Params:         0       0       0
  2475 ;;      Locals:         0       3       0
  2476 ;;      Temps:          2       0       0
  2477 ;;      Totals:         2       3       0
  2478 ;;Total ram usage:        5 bytes
  2479 ;; Hardware stack levels used:    1
  2480 ;; Hardware stack levels required when called:    2
  2481 ;; This function calls:
  2482 ;;		Nothing
  2483 ;; This function is called by:
  2484 ;;		_SaveDataToFlash
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           
  2489                           ;psect for function _flash_memory_erase
  2490  040C                     _flash_memory_erase:	
  2491                           
  2492                           ;incstack = 0
  2493                           ; Regs used in _flash_memory_erase: [wreg+status,2]
  2494                           ;flash_memory_erase@Page stored from wreg
  2495  040C  0020               	movlb	0	; select bank0
  2496  040D  00BB               	movwf	flash_memory_erase@Page
  2497                           
  2498                           ;flash_routines.c: 139: unsigned int AddrBuf;
  2499                           ;flash_routines.c: 140: INTCONbits.GIE = 0;
  2500  040E  138B               	bcf	11,7	;volatile
  2501                           
  2502                           ;flash_routines.c: 141: AddrBuf=0x0780;
  2503  040F  3080               	movlw	128
  2504  0410  00BC               	movwf	flash_memory_erase@AddrBuf
  2505  0411  3007               	movlw	7
  2506  0412  00BD               	movwf	flash_memory_erase@AddrBuf+1
  2507                           
  2508                           ;flash_routines.c: 142: AddrBuf+=(Page*16);
  2509  0413  083B               	movf	flash_memory_erase@Page,w
  2510  0414  00F6               	movwf	??_flash_memory_erase
  2511  0415  01F7               	clrf	??_flash_memory_erase+1
  2512  0416  0EF6               	swapf	??_flash_memory_erase,f
  2513  0417  0EF7               	swapf	??_flash_memory_erase+1,f
  2514  0418  30F0               	movlw	240
  2515  0419  05F7               	andwf	??_flash_memory_erase+1,f
  2516  041A  0876               	movf	??_flash_memory_erase,w
  2517  041B  390F               	andlw	15
  2518  041C  04F7               	iorwf	??_flash_memory_erase+1,f
  2519  041D  30F0               	movlw	240
  2520  041E  05F6               	andwf	??_flash_memory_erase,f
  2521  041F  0876               	movf	??_flash_memory_erase,w
  2522  0420  07BC               	addwf	flash_memory_erase@AddrBuf,f
  2523  0421  0877               	movf	??_flash_memory_erase+1,w
  2524  0422  3DBD               	addwfc	flash_memory_erase@AddrBuf+1,f
  2525                           
  2526                           ;flash_routines.c: 143: PMADRL=((AddrBuf)&0xff);
  2527  0423  083C               	movf	flash_memory_erase@AddrBuf,w
  2528  0424  0023               	movlb	3	; select bank3
  2529  0425  0091               	movwf	17	;volatile
  2530                           
  2531                           ;flash_routines.c: 144: PMADRH=((AddrBuf)>>8);
  2532  0426  0020               	movlb	0	; select bank0
  2533  0427  083D               	movf	flash_memory_erase@AddrBuf+1,w
  2534  0428  0023               	movlb	3	; select bank3
  2535  0429  0092               	movwf	18	;volatile
  2536                           
  2537                           ;flash_routines.c: 145: PMCON1bits.CFGS = 0;
  2538  042A  1315               	bcf	21,6	;volatile
  2539                           
  2540                           ;flash_routines.c: 146: PMCON1bits.WREN = 1;
  2541  042B  1515               	bsf	21,2	;volatile
  2542                           
  2543                           ;flash_routines.c: 147: PMCON1bits.FREE = 1;
  2544  042C  1615               	bsf	21,4	;volatile
  2545                           
  2546                           ;flash_routines.c: 149: PMCON2 = 0x55;
  2547  042D  3055               	movlw	85
  2548  042E  0096               	movwf	22	;volatile
  2549                           
  2550                           ;flash_routines.c: 150: PMCON2 = 0xAA;
  2551  042F  30AA               	movlw	170
  2552  0430  0096               	movwf	22	;volatile
  2553                           
  2554                           ;flash_routines.c: 151: PMCON1bits.WR = 1;
  2555  0431  1495               	bsf	21,1	;volatile
  2556  0432  0000               	nop	; ;# 
  2557  0433  0000               	nop	; ;# 
  2558  0434  0000               	nop	; ;# 
  2559  0435  0000               	nop	; ;# 
  2560                           
  2561                           ;flash_routines.c: 158: PMCON1bits.WREN = 0;
  2562  0436  0023               	movlb	3	; select bank3
  2563  0437  1115               	bcf	21,2	;volatile
  2564                           
  2565                           ;flash_routines.c: 159: INTCONbits.GIE = 1;
  2566  0438  178B               	bsf	11,7	;volatile
  2567  0439  0008               	return
  2568  043A                     __end_of_flash_memory_erase:	
  2569                           
  2570                           	psect	text9
  2571  052D                     __ptext9:	
  2572 ;; *************** function _BzSet *****************
  2573 ;; Defined at:
  2574 ;;		line 361 in file "sur/Main.c"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;  Times           1    wreg     unsigned char 
  2577 ;;  Long            2    4[COMMON] unsigned int 
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;  Times           1    1[BANK0 ] unsigned char 
  2580 ;; Return value:  Size  Location     Type
  2581 ;;		None               void
  2582 ;; Registers used:
  2583 ;;		wreg, status,2, status,0
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 0/0
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMMON   BANK0   BANK1
  2589 ;;      Params:         2       0       0
  2590 ;;      Locals:         0       1       0
  2591 ;;      Temps:          0       1       0
  2592 ;;      Totals:         2       2       0
  2593 ;;Total ram usage:        4 bytes
  2594 ;; Hardware stack levels used:    1
  2595 ;; Hardware stack levels required when called:    2
  2596 ;; This function calls:
  2597 ;;		Nothing
  2598 ;; This function is called by:
  2599 ;;		_IrDeal
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           
  2604                           ;psect for function _BzSet
  2605  052D                     _BzSet:	
  2606                           
  2607                           ;incstack = 0
  2608                           ; Regs used in _BzSet: [wreg+status,2+status,0]
  2609                           ;BzSet@Times stored from wreg
  2610  052D  0020               	movlb	0	; select bank0
  2611  052E  00BC               	movwf	BzSet@Times
  2612                           
  2613                           ;Main.c: 363: Bz.LongCnt=0;
  2614  052F  01A0               	clrf	_Bz
  2615  0530  01A1               	clrf	_Bz+1
  2616                           
  2617                           ;Main.c: 364: Bz.Long=Long;
  2618  0531  0877               	movf	BzSet@Long+1,w
  2619  0532  01A3               	clrf	_Bz+3
  2620  0533  07A3               	addwf	_Bz+3,f
  2621  0534  0876               	movf	BzSet@Long,w
  2622  0535  01A2               	clrf	_Bz+2
  2623  0536  07A2               	addwf	_Bz+2,f
  2624                           
  2625                           ;Main.c: 365: Bz.TimesCnt=0;
  2626  0537  01A4               	clrf	_Bz+4
  2627                           
  2628                           ;Main.c: 366: Bz.Times=Times;
  2629  0538  083C               	movf	BzSet@Times,w
  2630  0539  00BB               	movwf	??_BzSet
  2631  053A  083B               	movf	??_BzSet,w
  2632  053B  00A5               	movwf	_Bz+5
  2633                           
  2634                           ;Main.c: 367: Bz.BzSwitchFlg=1;
  2635  053C  1426               	bsf	_Bz+6,0
  2636  053D  0008               	return
  2637  053E                     __end_of_BzSet:	
  2638                           
  2639                           	psect	text10
  2640  043A                     __ptext10:	
  2641 ;; *************** function _Initialize *****************
  2642 ;; Defined at:
  2643 ;;		line 327 in file "sur/Main.c"
  2644 ;; Parameters:    Size  Location     Type
  2645 ;;		None
  2646 ;; Auto vars:     Size  Location     Type
  2647 ;;		None
  2648 ;; Return value:  Size  Location     Type
  2649 ;;		None               void
  2650 ;; Registers used:
  2651 ;;		wreg, status,2, status,0
  2652 ;; Tracked objects:
  2653 ;;		On entry : 0/0
  2654 ;;		On exit  : 0/0
  2655 ;;		Unchanged: 0/0
  2656 ;; Data sizes:     COMMON   BANK0   BANK1
  2657 ;;      Params:         0       0       0
  2658 ;;      Locals:         0       0       0
  2659 ;;      Temps:          0       0       0
  2660 ;;      Totals:         0       0       0
  2661 ;;Total ram usage:        0 bytes
  2662 ;; Hardware stack levels used:    1
  2663 ;; Hardware stack levels required when called:    2
  2664 ;; This function calls:
  2665 ;;		Nothing
  2666 ;; This function is called by:
  2667 ;;		_main
  2668 ;; This function uses a non-reentrant model
  2669 ;;
  2670                           
  2671                           
  2672                           ;psect for function _Initialize
  2673  043A                     _Initialize:	
  2674                           
  2675                           ;Main.c: 329: OSCCON = 0x7a;
  2676                           
  2677                           ;incstack = 0
  2678                           ; Regs used in _Initialize: [wreg+status,2+status,0]
  2679  043A  307A               	movlw	122
  2680  043B  0021               	movlb	1	; select bank1
  2681  043C  0099               	movwf	25	;volatile
  2682                           
  2683                           ;Main.c: 330: WDTCON = 0x0e;
  2684  043D  300E               	movlw	14
  2685  043E  0097               	movwf	23	;volatile
  2686                           
  2687                           ;Main.c: 331: ANSELA = 0;
  2688  043F  0023               	movlb	3	; select bank3
  2689  0440  018C               	clrf	12	;volatile
  2690                           
  2691                           ;Main.c: 332: ANSELC = 0;
  2692  0441  018E               	clrf	14	;volatile
  2693                           
  2694                           ;Main.c: 335: TRISA = 0b00010000;
  2695  0442  3010               	movlw	16
  2696  0443  0021               	movlb	1	; select bank1
  2697  0444  008C               	movwf	12	;volatile
  2698                           
  2699                           ;Main.c: 336: WPUA = 0b00000100;
  2700  0445  3004               	movlw	4
  2701  0446  0024               	movlb	4	; select bank4
  2702  0447  008C               	movwf	12	;volatile
  2703                           
  2704                           ;Main.c: 337: PORTA = 0b00000000;
  2705  0448  0020               	movlb	0	; select bank0
  2706  0449  018C               	clrf	12	;volatile
  2707                           
  2708                           ;Main.c: 338: TRISC = 0b00000100;
  2709  044A  3004               	movlw	4
  2710  044B  0021               	movlb	1	; select bank1
  2711  044C  008E               	movwf	14	;volatile
  2712                           
  2713                           ;Main.c: 339: PORTC = 0b00000100;
  2714  044D  3004               	movlw	4
  2715  044E  0020               	movlb	0	; select bank0
  2716  044F  008E               	movwf	14	;volatile
  2717                           
  2718                           ;Main.c: 342: OPTION_REGbits.TMR0CS = 0;
  2719  0450  0021               	movlb	1	; select bank1
  2720  0451  1295               	bcf	21,5	;volatile
  2721                           
  2722                           ;Main.c: 343: OPTION_REGbits.PS = 0;
  2723  0452  30F8               	movlw	-8
  2724  0453  0595               	andwf	21,f	;volatile
  2725                           
  2726                           ;Main.c: 344: OPTION_REGbits.PSA = 0;
  2727  0454  1195               	bcf	21,3	;volatile
  2728                           
  2729                           ;Main.c: 346: TMR0 = 64;
  2730  0455  3040               	movlw	64
  2731  0456  0020               	movlb	0	; select bank0
  2732  0457  0095               	movwf	21	;volatile
  2733                           
  2734                           ;Main.c: 347: INTCONbits.TMR0IE = 1;
  2735  0458  168B               	bsf	11,5	;volatile
  2736                           
  2737                           ;Main.c: 350: PR2 = 69 - 1;
  2738  0459  3044               	movlw	68
  2739  045A  009B               	movwf	27	;volatile
  2740                           
  2741                           ;Main.c: 351: T2CON = 0b00000111;
  2742  045B  3007               	movlw	7
  2743  045C  009C               	movwf	28	;volatile
  2744                           
  2745                           ;Main.c: 353: PWM2DCL = 0x00;
  2746  045D  002C               	movlb	12	; select bank12
  2747  045E  0194               	clrf	20	;volatile
  2748                           
  2749                           ;Main.c: 354: PWM2DCH = 0x00;
  2750  045F  0195               	clrf	21	;volatile
  2751                           
  2752                           ;Main.c: 355: PWM2CON = 0xd0;
  2753  0460  30D0               	movlw	208
  2754  0461  0096               	movwf	22	;volatile
  2755                           
  2756                           ;Main.c: 358: INTCONbits.GIE = 1;
  2757  0462  178B               	bsf	11,7	;volatile
  2758  0463  0008               	return
  2759  0464                     __end_of_Initialize:	
  2760                           
  2761                           	psect	text11
  2762  04E9                     __ptext11:	
  2763 ;; *************** function _InitPowerOn *****************
  2764 ;; Defined at:
  2765 ;;		line 83 in file "sur/Main.c"
  2766 ;; Parameters:    Size  Location     Type
  2767 ;;		None
  2768 ;; Auto vars:     Size  Location     Type
  2769 ;;		None
  2770 ;; Return value:  Size  Location     Type
  2771 ;;		None               void
  2772 ;; Registers used:
  2773 ;;		wreg, status,2, status,0, pclath, cstack
  2774 ;; Tracked objects:
  2775 ;;		On entry : 0/0
  2776 ;;		On exit  : 0/0
  2777 ;;		Unchanged: 0/0
  2778 ;; Data sizes:     COMMON   BANK0   BANK1
  2779 ;;      Params:         0       0       0
  2780 ;;      Locals:         0       0       0
  2781 ;;      Temps:          0       2       0
  2782 ;;      Totals:         0       2       0
  2783 ;;Total ram usage:        2 bytes
  2784 ;; Hardware stack levels used:    1
  2785 ;; Hardware stack levels required when called:    4
  2786 ;; This function calls:
  2787 ;;		_ReadDataFromFlash
  2788 ;;		_WritePwmPercentage
  2789 ;;		___wmul
  2790 ;; This function is called by:
  2791 ;;		_main
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           
  2796                           ;psect for function _InitPowerOn
  2797  04E9                     _InitPowerOn:	
  2798                           
  2799                           ;Main.c: 85: ReadDataFromFlash();
  2800                           
  2801                           ;incstack = 0
  2802                           ; Regs used in _InitPowerOn: [wreg+status,2+status,0+pclath+cstack]
  2803  04E9  23D8               	fcall	_ReadDataFromFlash
  2804                           
  2805                           ;Main.c: 86: PORTCbits.RC0=0;
  2806  04EA  0020               	movlb	0	; select bank0
  2807  04EB  100E               	bcf	14,0	;volatile
  2808                           
  2809                           ;Main.c: 87: WritePwmPercentage(2,DimmingNum*5);
  2810  04EC  0878               	movf	_DimmingNum,w
  2811  04ED  00C4               	movwf	??_InitPowerOn
  2812  04EE  01C5               	clrf	??_InitPowerOn+1
  2813  04EF  0844               	movf	??_InitPowerOn,w
  2814  04F0  00BB               	movwf	___wmul@multiplier
  2815  04F1  0845               	movf	??_InitPowerOn+1,w
  2816  04F2  00BC               	movwf	___wmul@multiplier+1
  2817  04F3  3005               	movlw	5
  2818  04F4  00BD               	movwf	___wmul@multiplicand
  2819  04F5  3000               	movlw	0
  2820  04F6  00BE               	movwf	___wmul@multiplicand+1
  2821  04F7  24CB               	fcall	___wmul
  2822  04F8  0020               	movlb	0	; select bank0
  2823  04F9  083C               	movf	?___wmul+1,w
  2824  04FA  01C0               	clrf	WritePwmPercentage@Percentage+1
  2825  04FB  07C0               	addwf	WritePwmPercentage@Percentage+1,f
  2826  04FC  083B               	movf	?___wmul,w
  2827  04FD  01BF               	clrf	WritePwmPercentage@Percentage
  2828  04FE  07BF               	addwf	WritePwmPercentage@Percentage,f
  2829  04FF  3002               	movlw	2
  2830  0500  2268               	fcall	_WritePwmPercentage
  2831  0501  0008               	return
  2832  0502                     __end_of_InitPowerOn:	
  2833                           
  2834                           	psect	text12
  2835  0268                     __ptext12:	
  2836 ;; *************** function _WritePwmPercentage *****************
  2837 ;; Defined at:
  2838 ;;		line 4 in file "sur/Pwm.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;  AN              1    wreg     unsigned char 
  2841 ;;  Percentage      2    4[BANK0 ] unsigned int 
  2842 ;; Auto vars:     Size  Location     Type
  2843 ;;  AN              1    8[BANK0 ] unsigned char 
  2844 ;; Return value:  Size  Location     Type
  2845 ;;		None               void
  2846 ;; Registers used:
  2847 ;;		wreg, status,2, status,0
  2848 ;; Tracked objects:
  2849 ;;		On entry : 0/0
  2850 ;;		On exit  : 0/0
  2851 ;;		Unchanged: 0/0
  2852 ;; Data sizes:     COMMON   BANK0   BANK1
  2853 ;;      Params:         0       2       0
  2854 ;;      Locals:         0       1       0
  2855 ;;      Temps:          0       2       0
  2856 ;;      Totals:         0       5       0
  2857 ;;Total ram usage:        5 bytes
  2858 ;; Hardware stack levels used:    1
  2859 ;; Hardware stack levels required when called:    2
  2860 ;; This function calls:
  2861 ;;		Nothing
  2862 ;; This function is called by:
  2863 ;;		_InitPowerOn
  2864 ;;		_IrDeal
  2865 ;;		_TimeBase
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           
  2870                           ;psect for function _WritePwmPercentage
  2871  0268                     _WritePwmPercentage:	
  2872                           
  2873                           ;incstack = 0
  2874                           ; Regs used in _WritePwmPercentage: [wreg+status,2+status,0]
  2875                           ;WritePwmPercentage@AN stored from wreg
  2876  0268  0020               	movlb	0	; select bank0
  2877  0269  00C3               	movwf	WritePwmPercentage@AN
  2878                           
  2879                           ;Pwm.c: 6: if(Percentage>276)
  2880  026A  3001               	movlw	1
  2881  026B  0240               	subwf	WritePwmPercentage@Percentage+1,w
  2882  026C  3015               	movlw	21
  2883  026D  1903               	skipnz
  2884  026E  023F               	subwf	WritePwmPercentage@Percentage,w
  2885  026F  1C03               	skipc
  2886  0270  2A75               	goto	l265
  2887                           
  2888                           ;Pwm.c: 7: Percentage=276;
  2889  0271  3014               	movlw	20
  2890  0272  00BF               	movwf	WritePwmPercentage@Percentage
  2891  0273  3001               	movlw	1
  2892  0274  00C0               	movwf	WritePwmPercentage@Percentage+1
  2893  0275                     l265:	
  2894                           
  2895                           ;Pwm.c: 9: if(AN == 1)
  2896  0275  0843               	movf	WritePwmPercentage@AN,w
  2897  0276  3A01               	xorlw	1
  2898  0277  1D03               	skipz
  2899  0278  2A90               	goto	l1602
  2900                           
  2901                           ;Pwm.c: 10: {
  2902                           ;Pwm.c: 11: PWM1DCH = Percentage>>2;
  2903  0279  0840               	movf	WritePwmPercentage@Percentage+1,w
  2904  027A  00C2               	movwf	??_WritePwmPercentage+1
  2905  027B  083F               	movf	WritePwmPercentage@Percentage,w
  2906  027C  00C1               	movwf	??_WritePwmPercentage
  2907  027D  36C2               	lsrf	??_WritePwmPercentage+1,f
  2908  027E  0CC1               	rrf	??_WritePwmPercentage,f
  2909  027F  36C2               	lsrf	??_WritePwmPercentage+1,f
  2910  0280  0CC1               	rrf	??_WritePwmPercentage,f
  2911  0281  0841               	movf	??_WritePwmPercentage,w
  2912  0282  002C               	movlb	12	; select bank12
  2913  0283  0092               	movwf	18	;volatile
  2914                           
  2915                           ;Pwm.c: 12: PWM1DCL = Percentage<<6;
  2916  0284  0020               	movlb	0	; select bank0
  2917  0285  083F               	movf	WritePwmPercentage@Percentage,w
  2918  0286  00C1               	movwf	??_WritePwmPercentage
  2919  0287  3005               	movlw	5
  2920  0288                     u1435:	
  2921  0288  35C1               	lslf	??_WritePwmPercentage,f
  2922  0289  3EFF               	addlw	-1
  2923  028A  1D03               	skipz
  2924  028B  2A88               	goto	u1435
  2925  028C  3541               	lslf	??_WritePwmPercentage,w
  2926  028D  002C               	movlb	12	; select bank12
  2927  028E  0091               	movwf	17	;volatile
  2928                           
  2929                           ;Pwm.c: 13: }
  2930  028F  0008               	return
  2931  0290                     l1602:	
  2932                           
  2933                           ;Pwm.c: 14: else if(AN == 2)
  2934  0290  0020               	movlb	0	; select bank0
  2935  0291  0843               	movf	WritePwmPercentage@AN,w
  2936  0292  3A02               	xorlw	2
  2937  0293  1D03               	skipz
  2938  0294  2AAC               	goto	l1606
  2939                           
  2940                           ;Pwm.c: 15: {
  2941                           ;Pwm.c: 16: PWM2DCH = Percentage>>2;
  2942  0295  0840               	movf	WritePwmPercentage@Percentage+1,w
  2943  0296  00C2               	movwf	??_WritePwmPercentage+1
  2944  0297  083F               	movf	WritePwmPercentage@Percentage,w
  2945  0298  00C1               	movwf	??_WritePwmPercentage
  2946  0299  36C2               	lsrf	??_WritePwmPercentage+1,f
  2947  029A  0CC1               	rrf	??_WritePwmPercentage,f
  2948  029B  36C2               	lsrf	??_WritePwmPercentage+1,f
  2949  029C  0CC1               	rrf	??_WritePwmPercentage,f
  2950  029D  0841               	movf	??_WritePwmPercentage,w
  2951  029E  002C               	movlb	12	; select bank12
  2952  029F  0095               	movwf	21	;volatile
  2953                           
  2954                           ;Pwm.c: 17: PWM2DCL = Percentage<<6;
  2955  02A0  0020               	movlb	0	; select bank0
  2956  02A1  083F               	movf	WritePwmPercentage@Percentage,w
  2957  02A2  00C1               	movwf	??_WritePwmPercentage
  2958  02A3  3005               	movlw	5
  2959  02A4                     u1455:	
  2960  02A4  35C1               	lslf	??_WritePwmPercentage,f
  2961  02A5  3EFF               	addlw	-1
  2962  02A6  1D03               	skipz
  2963  02A7  2AA4               	goto	u1455
  2964  02A8  3541               	lslf	??_WritePwmPercentage,w
  2965  02A9  002C               	movlb	12	; select bank12
  2966  02AA  0094               	movwf	20	;volatile
  2967                           
  2968                           ;Pwm.c: 18: }
  2969  02AB  0008               	return
  2970  02AC                     l1606:	
  2971                           
  2972                           ;Pwm.c: 19: else if(AN == 3)
  2973  02AC  0020               	movlb	0	; select bank0
  2974  02AD  0843               	movf	WritePwmPercentage@AN,w
  2975  02AE  3A03               	xorlw	3
  2976  02AF  1D03               	skipz
  2977  02B0  2AC8               	goto	l1610
  2978                           
  2979                           ;Pwm.c: 20: {
  2980                           ;Pwm.c: 21: PWM3DCH = Percentage>>2;
  2981  02B1  0840               	movf	WritePwmPercentage@Percentage+1,w
  2982  02B2  00C2               	movwf	??_WritePwmPercentage+1
  2983  02B3  083F               	movf	WritePwmPercentage@Percentage,w
  2984  02B4  00C1               	movwf	??_WritePwmPercentage
  2985  02B5  36C2               	lsrf	??_WritePwmPercentage+1,f
  2986  02B6  0CC1               	rrf	??_WritePwmPercentage,f
  2987  02B7  36C2               	lsrf	??_WritePwmPercentage+1,f
  2988  02B8  0CC1               	rrf	??_WritePwmPercentage,f
  2989  02B9  0841               	movf	??_WritePwmPercentage,w
  2990  02BA  002C               	movlb	12	; select bank12
  2991  02BB  0098               	movwf	24	;volatile
  2992                           
  2993                           ;Pwm.c: 22: PWM3DCL = Percentage<<6;
  2994  02BC  0020               	movlb	0	; select bank0
  2995  02BD  083F               	movf	WritePwmPercentage@Percentage,w
  2996  02BE  00C1               	movwf	??_WritePwmPercentage
  2997  02BF  3005               	movlw	5
  2998  02C0                     u1475:	
  2999  02C0  35C1               	lslf	??_WritePwmPercentage,f
  3000  02C1  3EFF               	addlw	-1
  3001  02C2  1D03               	skipz
  3002  02C3  2AC0               	goto	u1475
  3003  02C4  3541               	lslf	??_WritePwmPercentage,w
  3004  02C5  002C               	movlb	12	; select bank12
  3005  02C6  0097               	movwf	23	;volatile
  3006                           
  3007                           ;Pwm.c: 23: }
  3008  02C7  0008               	return
  3009  02C8                     l1610:	
  3010                           
  3011                           ;Pwm.c: 24: else if(AN == 4)
  3012  02C8  0020               	movlb	0	; select bank0
  3013  02C9  0843               	movf	WritePwmPercentage@AN,w
  3014  02CA  3A04               	xorlw	4
  3015  02CB  1D03               	skipz
  3016  02CC  0008               	return
  3017                           
  3018                           ;Pwm.c: 25: {
  3019                           ;Pwm.c: 26: PWM4DCH = Percentage>>2;
  3020  02CD  0840               	movf	WritePwmPercentage@Percentage+1,w
  3021  02CE  00C2               	movwf	??_WritePwmPercentage+1
  3022  02CF  083F               	movf	WritePwmPercentage@Percentage,w
  3023  02D0  00C1               	movwf	??_WritePwmPercentage
  3024  02D1  36C2               	lsrf	??_WritePwmPercentage+1,f
  3025  02D2  0CC1               	rrf	??_WritePwmPercentage,f
  3026  02D3  36C2               	lsrf	??_WritePwmPercentage+1,f
  3027  02D4  0CC1               	rrf	??_WritePwmPercentage,f
  3028  02D5  0841               	movf	??_WritePwmPercentage,w
  3029  02D6  002C               	movlb	12	; select bank12
  3030  02D7  009B               	movwf	27	;volatile
  3031                           
  3032                           ;Pwm.c: 27: PWM4DCL = Percentage<<6;
  3033  02D8  0020               	movlb	0	; select bank0
  3034  02D9  083F               	movf	WritePwmPercentage@Percentage,w
  3035  02DA  00C1               	movwf	??_WritePwmPercentage
  3036  02DB  3005               	movlw	5
  3037  02DC                     u1495:	
  3038  02DC  35C1               	lslf	??_WritePwmPercentage,f
  3039  02DD  3EFF               	addlw	-1
  3040  02DE  1D03               	skipz
  3041  02DF  2ADC               	goto	u1495
  3042  02E0  3541               	lslf	??_WritePwmPercentage,w
  3043  02E1  002C               	movlb	12	; select bank12
  3044  02E2  009A               	movwf	26	;volatile
  3045  02E3  0008               	return
  3046  02E4                     __end_of_WritePwmPercentage:	
  3047                           
  3048                           	psect	text13
  3049  03D8                     __ptext13:	
  3050 ;; *************** function _ReadDataFromFlash *****************
  3051 ;; Defined at:
  3052 ;;		line 133 in file "sur/Main.c"
  3053 ;; Parameters:    Size  Location     Type
  3054 ;;		None
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;  AddrTemp        1    4[BANK0 ] unsigned char 
  3057 ;; Return value:  Size  Location     Type
  3058 ;;		None               void
  3059 ;; Registers used:
  3060 ;;		wreg, status,2, status,0, pclath, cstack
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 0/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMMON   BANK0   BANK1
  3066 ;;      Params:         0       0       0
  3067 ;;      Locals:         0       1       0
  3068 ;;      Temps:          0       1       0
  3069 ;;      Totals:         0       2       0
  3070 ;;Total ram usage:        2 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:    3
  3073 ;; This function calls:
  3074 ;;		_flash_memory_read
  3075 ;; This function is called by:
  3076 ;;		_InitPowerOn
  3077 ;;		_IrDeal
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           
  3082                           ;psect for function _ReadDataFromFlash
  3083  03D8                     _ReadDataFromFlash:	
  3084                           
  3085                           ;Main.c: 135: unsigned char AddrTemp;
  3086                           ;Main.c: 136: AddrTemp=flash_memory_read(96);
  3087                           
  3088                           ;incstack = 0
  3089                           ; Regs used in _ReadDataFromFlash: [wreg+status,2+status,0+pclath+cstack]
  3090  03D8  3060               	movlw	96
  3091  03D9  248E               	fcall	_flash_memory_read
  3092  03DA  0020               	movlb	0	; select bank0
  3093  03DB  00BE               	movwf	??_ReadDataFromFlash
  3094  03DC  083E               	movf	??_ReadDataFromFlash,w
  3095  03DD  00BF               	movwf	ReadDataFromFlash@AddrTemp
  3096                           
  3097                           ;Main.c: 137: if(AddrTemp>=1 && AddrTemp<=15)
  3098  03DE  083F               	movf	ReadDataFromFlash@AddrTemp,w
  3099  03DF  1903               	btfsc	3,2
  3100  03E0  2BEF               	goto	l2018
  3101  03E1  3010               	movlw	16
  3102  03E2  023F               	subwf	ReadDataFromFlash@AddrTemp,w
  3103  03E3  1803               	skipnc
  3104  03E4  2BEF               	goto	l2018
  3105                           
  3106                           ;Main.c: 138: {
  3107                           ;Main.c: 139: AddrTemp=AddrTemp*2+96;
  3108  03E5  353F               	lslf	ReadDataFromFlash@AddrTemp,w
  3109  03E6  3E60               	addlw	96
  3110  03E7  00BE               	movwf	??_ReadDataFromFlash
  3111  03E8  083E               	movf	??_ReadDataFromFlash,w
  3112  03E9  00BF               	movwf	ReadDataFromFlash@AddrTemp
  3113                           
  3114                           ;Main.c: 140: DimmingNumBackup=DimmingNum=flash_memory_read(AddrTemp);
  3115  03EA  083F               	movf	ReadDataFromFlash@AddrTemp,w
  3116  03EB  248E               	fcall	_flash_memory_read
  3117  03EC  00F8               	movwf	_DimmingNum
  3118  03ED  0020               	movlb	0	; select bank0
  3119  03EE  2BF5               	goto	L2
  3120  03EF                     l2018:	
  3121                           ;Main.c: 141: }
  3122                           
  3123                           
  3124                           ;Main.c: 142: else
  3125                           ;Main.c: 143: {
  3126                           ;Main.c: 144: AddrTemp=2+96;
  3127  03EF  3062               	movlw	98
  3128  03F0  00BE               	movwf	??_ReadDataFromFlash
  3129  03F1  083E               	movf	??_ReadDataFromFlash,w
  3130  03F2  00BF               	movwf	ReadDataFromFlash@AddrTemp
  3131                           
  3132                           ;Main.c: 145: DimmingNumBackup=DimmingNum=56;
  3133  03F3  3038               	movlw	56
  3134  03F4  00F8               	movwf	_DimmingNum
  3135  03F5                     L2:	
  3136  03F5  00BE               	movwf	??_ReadDataFromFlash
  3137  03F6  083E               	movf	??_ReadDataFromFlash,w
  3138  03F7  00B4               	movwf	_DimmingNumBackup
  3139                           
  3140                           ;Main.c: 146: }
  3141                           ;Main.c: 147: if(flash_memory_read(AddrTemp+1)==0)
  3142  03F8  083F               	movf	ReadDataFromFlash@AddrTemp,w
  3143  03F9  3E01               	addlw	1
  3144  03FA  248E               	fcall	_flash_memory_read
  3145  03FB  3800               	iorlw	0
  3146  03FC  1D03               	skipz
  3147  03FD  2C04               	goto	l177
  3148                           
  3149                           ;Main.c: 148: {
  3150                           ;Main.c: 149: PORTCbits.RC4=0;
  3151  03FE  0020               	movlb	0	; select bank0
  3152  03FF  120E               	bcf	14,4	;volatile
  3153                           
  3154                           ;Main.c: 150: PORTCbits.RC5=1;
  3155  0400  168E               	bsf	14,5	;volatile
  3156                           
  3157                           ;Main.c: 151: ColorTemperatureBack=ColorTemperature=0;
  3158  0401  1170               	bcf	_ColorTemperature/(0+8),_ColorTemperature& (0+7)
  3159  0402  11F0               	bcf	_ColorTemperatureBack/(0+8),_ColorTemperatureBack& (0+7)
  3160                           
  3161                           ;Main.c: 152: }
  3162  0403  0008               	return
  3163  0404                     l177:	
  3164                           
  3165                           ;Main.c: 153: else
  3166                           ;Main.c: 154: {
  3167                           ;Main.c: 155: PORTCbits.RC4=1;
  3168  0404  0020               	movlb	0	; select bank0
  3169  0405  160E               	bsf	14,4	;volatile
  3170                           
  3171                           ;Main.c: 156: PORTCbits.RC5=0;
  3172  0406  128E               	bcf	14,5	;volatile
  3173                           
  3174                           ;Main.c: 157: ColorTemperatureBack=ColorTemperature=1;
  3175  0407  1570               	bsf	_ColorTemperature/(0+8),_ColorTemperature& (0+7)
  3176  0408  11F0               	bcf	_ColorTemperatureBack/(0+8),_ColorTemperatureBack& (0+7)
  3177  0409  1970               	btfsc	_ColorTemperature/(0+8),_ColorTemperature& (0+7)
  3178  040A  15F0               	bsf	_ColorTemperatureBack/(0+8),_ColorTemperatureBack& (0+7)
  3179  040B  0008               	return
  3180  040C                     __end_of_ReadDataFromFlash:	
  3181                           
  3182                           	psect	text14
  3183  048E                     __ptext14:	
  3184 ;; *************** function _flash_memory_read *****************
  3185 ;; Defined at:
  3186 ;;		line 46 in file "sur/flash_routines.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;  address         1    wreg     unsigned char 
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;  address         1    0[BANK0 ] unsigned char 
  3191 ;;  AddrBuf         2    1[BANK0 ] unsigned int 
  3192 ;; Return value:  Size  Location     Type
  3193 ;;                  1    wreg      unsigned char 
  3194 ;; Registers used:
  3195 ;;		wreg, status,2
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 0/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMMON   BANK0   BANK1
  3201 ;;      Params:         0       0       0
  3202 ;;      Locals:         0       3       0
  3203 ;;      Temps:          2       0       0
  3204 ;;      Totals:         2       3       0
  3205 ;;Total ram usage:        5 bytes
  3206 ;; Hardware stack levels used:    1
  3207 ;; Hardware stack levels required when called:    2
  3208 ;; This function calls:
  3209 ;;		Nothing
  3210 ;; This function is called by:
  3211 ;;		_SaveDataToFlash
  3212 ;;		_ReadDataFromFlash
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           
  3217                           ;psect for function _flash_memory_read
  3218  048E                     _flash_memory_read:	
  3219                           
  3220                           ;incstack = 0
  3221                           ; Regs used in _flash_memory_read: [wreg+status,2]
  3222                           ;flash_memory_read@address stored from wreg
  3223  048E  0020               	movlb	0	; select bank0
  3224  048F  00BB               	movwf	flash_memory_read@address
  3225                           
  3226                           ;flash_routines.c: 51: unsigned int AddrBuf;
  3227                           ;flash_routines.c: 52: INTCONbits.GIE = 0;
  3228  0490  138B               	bcf	11,7	;volatile
  3229                           
  3230                           ;flash_routines.c: 53: AddrBuf=0x0780;
  3231  0491  3080               	movlw	128
  3232  0492  00BC               	movwf	flash_memory_read@AddrBuf
  3233  0493  3007               	movlw	7
  3234  0494  00BD               	movwf	flash_memory_read@AddrBuf+1
  3235                           
  3236                           ;flash_routines.c: 54: AddrBuf+=address;
  3237  0495  083B               	movf	flash_memory_read@address,w
  3238  0496  00F6               	movwf	??_flash_memory_read
  3239  0497  01F7               	clrf	??_flash_memory_read+1
  3240  0498  0876               	movf	??_flash_memory_read,w
  3241  0499  07BC               	addwf	flash_memory_read@AddrBuf,f
  3242  049A  0877               	movf	??_flash_memory_read+1,w
  3243  049B  3DBD               	addwfc	flash_memory_read@AddrBuf+1,f
  3244                           
  3245                           ;flash_routines.c: 55: PMADRL=((AddrBuf)&0xff);
  3246  049C  083C               	movf	flash_memory_read@AddrBuf,w
  3247  049D  0023               	movlb	3	; select bank3
  3248  049E  0091               	movwf	17	;volatile
  3249                           
  3250                           ;flash_routines.c: 56: PMADRH=((AddrBuf)>>8);
  3251  049F  0020               	movlb	0	; select bank0
  3252  04A0  083D               	movf	flash_memory_read@AddrBuf+1,w
  3253  04A1  0023               	movlb	3	; select bank3
  3254  04A2  0092               	movwf	18	;volatile
  3255                           
  3256                           ;flash_routines.c: 57: PMCON1bits.CFGS = 0;
  3257  04A3  1315               	bcf	21,6	;volatile
  3258                           
  3259                           ;flash_routines.c: 58: PMCON1bits.RD = 1;
  3260  04A4  1415               	bsf	21,0	;volatile
  3261  04A5  0000               	nop	; ;# 
  3262  04A6  0000               	nop	; ;# 
  3263  04A7  0000               	nop	; ;# 
  3264  04A8  0000               	nop	; ;# 
  3265                           
  3266                           ;flash_routines.c: 65: INTCONbits.GIE = 1;
  3267  04A9  178B               	bsf	11,7	;volatile
  3268                           
  3269                           ;flash_routines.c: 66: return ((PMDATH)<<8 | (PMDATL));
  3270  04AA  0023               	movlb	3	; select bank3
  3271  04AB  0813               	movf	19,w	;volatile
  3272  04AC  0008               	return
  3273  04AD                     __end_of_flash_memory_read:	
  3274                           
  3275                           	psect	text15
  3276  0464                     __ptext15:	
  3277 ;; *************** function _Delay *****************
  3278 ;; Defined at:
  3279 ;;		line 77 in file "sur/Main.c"
  3280 ;; Parameters:    Size  Location     Type
  3281 ;;  Time            4    0[BANK0 ] unsigned long 
  3282 ;; Auto vars:     Size  Location     Type
  3283 ;;		None
  3284 ;; Return value:  Size  Location     Type
  3285 ;;		None               void
  3286 ;; Registers used:
  3287 ;;		wreg
  3288 ;; Tracked objects:
  3289 ;;		On entry : 0/0
  3290 ;;		On exit  : 0/0
  3291 ;;		Unchanged: 0/0
  3292 ;; Data sizes:     COMMON   BANK0   BANK1
  3293 ;;      Params:         0       4       0
  3294 ;;      Locals:         0       0       0
  3295 ;;      Temps:          0       4       0
  3296 ;;      Totals:         0       8       0
  3297 ;;Total ram usage:        8 bytes
  3298 ;; Hardware stack levels used:    1
  3299 ;; Hardware stack levels required when called:    2
  3300 ;; This function calls:
  3301 ;;		Nothing
  3302 ;; This function is called by:
  3303 ;;		_main
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307                           
  3308                           ;psect for function _Delay
  3309  0464                     _Delay:	
  3310                           
  3311                           ;Main.c: 79: if(Time==0) return;
  3312                           
  3313                           ;incstack = 0
  3314                           ; Regs used in _Delay: [wreg]
  3315  0464  0020               	movlb	0	; select bank0
  3316  0465  083E               	movf	Delay@Time+3,w
  3317  0466  043D               	iorwf	Delay@Time+2,w
  3318  0467  043C               	iorwf	Delay@Time+1,w
  3319  0468  043B               	iorwf	Delay@Time,w
  3320  0469  1903               	btfsc	3,2
  3321  046A  0008               	return
  3322  046B                     l1864:	
  3323  046B  3001               	movlw	1
  3324  046C  0020               	movlb	0	; select bank0
  3325  046D  00BF               	movwf	??_Delay
  3326  046E  3000               	movlw	0
  3327  046F  00C0               	movwf	??_Delay+1
  3328  0470  3000               	movlw	0
  3329  0471  00C1               	movwf	??_Delay+2
  3330  0472  3000               	movlw	0
  3331  0473  00C2               	movwf	??_Delay+3
  3332  0474  083F               	movf	??_Delay,w
  3333  0475  02BB               	subwf	Delay@Time,f
  3334  0476  0840               	movf	??_Delay+1,w
  3335  0477  3BBC               	subwfb	Delay@Time+1,f
  3336  0478  0841               	movf	??_Delay+2,w
  3337  0479  3BBD               	subwfb	Delay@Time+2,f
  3338  047A  0842               	movf	??_Delay+3,w
  3339  047B  3BBE               	subwfb	Delay@Time+3,f
  3340  047C  30FF               	movlw	255
  3341  047D  063E               	xorwf	Delay@Time+3,w
  3342  047E  1D03               	skipz
  3343  047F  2C8A               	goto	u1835
  3344  0480  30FF               	movlw	255
  3345  0481  063D               	xorwf	Delay@Time+2,w
  3346  0482  1D03               	skipz
  3347  0483  2C8A               	goto	u1835
  3348  0484  30FF               	movlw	255
  3349  0485  063C               	xorwf	Delay@Time+1,w
  3350  0486  1D03               	skipz
  3351  0487  2C8A               	goto	u1835
  3352  0488  30FF               	movlw	255
  3353  0489  063B               	xorwf	Delay@Time,w
  3354  048A                     u1835:	
  3355  048A  1903               	btfsc	3,2
  3356  048B  0008               	return
  3357                           
  3358                           ;Main.c: 80: while(Time--) asm("clrwdt");
  3359  048C  0064               	clrwdt	;# 
  3360  048D  2C6B               	goto	l1864
  3361  048E                     __end_of_Delay:	
  3362                           
  3363                           	psect	text16
  3364  0502                     __ptext16:	
  3365 ;; *************** function _CheckIr *****************
  3366 ;; Defined at:
  3367 ;;		line 7 in file "sur/IrReceive.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;		None
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;		None
  3372 ;; Return value:  Size  Location     Type
  3373 ;;                  1    wreg      unsigned char 
  3374 ;; Registers used:
  3375 ;;		wreg
  3376 ;; Tracked objects:
  3377 ;;		On entry : 0/0
  3378 ;;		On exit  : 0/0
  3379 ;;		Unchanged: 0/0
  3380 ;; Data sizes:     COMMON   BANK0   BANK1
  3381 ;;      Params:         0       0       0
  3382 ;;      Locals:         0       0       0
  3383 ;;      Temps:          2       0       0
  3384 ;;      Totals:         2       0       0
  3385 ;;Total ram usage:        2 bytes
  3386 ;; Hardware stack levels used:    1
  3387 ;; Hardware stack levels required when called:    2
  3388 ;; This function calls:
  3389 ;;		Nothing
  3390 ;; This function is called by:
  3391 ;;		_main
  3392 ;; This function uses a non-reentrant model
  3393 ;;
  3394                           
  3395                           
  3396                           ;psect for function _CheckIr
  3397  0502                     _CheckIr:	
  3398                           
  3399                           ;IrReceive.c: 9: if(RcvFlg==1)
  3400                           
  3401                           ;incstack = 0
  3402                           ; Regs used in _CheckIr: [wreg]
  3403  0502  1FF0               	btfss	_RcvFlg/(0+8),_RcvFlg& (0+7)
  3404  0503  2D17               	goto	l1354
  3405                           
  3406                           ;IrReceive.c: 10: {
  3407                           ;IrReceive.c: 11: if(IrData.Buf3==0xF5 && (IrData.Buf1+IrData.Buf2)==0xff)
  3408  0504  0020               	movlb	0	; select bank0
  3409  0505  0829               	movf	_IrData+2,w	;volatile
  3410  0506  3AF5               	xorlw	245
  3411  0507  1D03               	skipz
  3412  0508  2D16               	goto	l20
  3413  0509  0827               	movf	_IrData,w	;volatile
  3414  050A  0728               	addwf	_IrData+1,w	;volatile
  3415  050B  00F6               	movwf	??_CheckIr
  3416  050C  01F7               	clrf	??_CheckIr+1
  3417  050D  0DF7               	rlf	??_CheckIr+1,f
  3418  050E  30FF               	movlw	255
  3419  050F  0676               	xorwf	??_CheckIr,w
  3420  0510  0477               	iorwf	??_CheckIr+1,w
  3421  0511  1D03               	skipz
  3422  0512  2D16               	goto	l20
  3423                           
  3424                           ;IrReceive.c: 12: {
  3425                           ;IrReceive.c: 14: RcvFlg=0;
  3426  0513  13F0               	bcf	_RcvFlg/(0+8),_RcvFlg& (0+7)
  3427                           
  3428                           ;IrReceive.c: 15: return(1);
  3429  0514  3001               	movlw	1
  3430  0515  0008               	return
  3431  0516                     l20:	
  3432                           
  3433                           ;IrReceive.c: 16: }
  3434                           ;IrReceive.c: 17: RcvFlg=0;
  3435  0516  13F0               	bcf	_RcvFlg/(0+8),_RcvFlg& (0+7)
  3436  0517                     l1354:	
  3437                           
  3438                           ;IrReceive.c: 18: }
  3439                           ;IrReceive.c: 19: return(0);
  3440  0517  3000               	movlw	0
  3441  0518  0008               	return
  3442  0519                     __end_of_CheckIr:	
  3443                           
  3444                           	psect	intentry
  3445  0004                     __pintentry:	
  3446 ;; *************** function _ISR *****************
  3447 ;; Defined at:
  3448 ;;		line 374 in file "sur/Main.c"
  3449 ;; Parameters:    Size  Location     Type
  3450 ;;		None
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;		None
  3453 ;; Return value:  Size  Location     Type
  3454 ;;		None               void
  3455 ;; Registers used:
  3456 ;;		wreg, status,2, status,0, pclath, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMMON   BANK0   BANK1
  3462 ;;      Params:         0       0       0
  3463 ;;      Locals:         0       0       0
  3464 ;;      Temps:          3       0       0
  3465 ;;      Totals:         3       0       0
  3466 ;;Total ram usage:        3 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; Hardware stack levels required when called:    1
  3469 ;; This function calls:
  3470 ;;		_IrRcv
  3471 ;; This function is called by:
  3472 ;;		Interrupt level 1
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476  0004                     _ISR:	
  3477                           
  3478                           ;incstack = 0
  3479                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  3480  0004  3180               	pagesel	$
  3481  0005  0020               	movlb	0	; select bank0
  3482  0006  087F               	movf	127,w
  3483  0007  00F5               	movwf	??_ISR+2
  3484                           
  3485                           ;Main.c: 376: if(INTCONbits.TMR0IF == 1)
  3486  0008  1D0B               	btfss	11,2	;volatile
  3487  0009  2847               	goto	i1l244
  3488                           
  3489                           ;Main.c: 377: {
  3490                           ;Main.c: 379: TMR0 =64;
  3491  000A  3040               	movlw	64
  3492  000B  0095               	movwf	21	;volatile
  3493                           
  3494                           ;Main.c: 380: if(Bz.BzSwitchFlg==1)
  3495  000C  1C26               	btfss	_Bz+6,0
  3496  000D  283A               	goto	i1l1824
  3497                           
  3498                           ;Main.c: 381: {
  3499                           ;Main.c: 382: if(Bz.LongCnt++<=Bz.Long)
  3500  000E  0821               	movf	_Bz+1,w
  3501  000F  00F4               	movwf	??_ISR+1
  3502  0010  0820               	movf	_Bz,w
  3503  0011  00F3               	movwf	??_ISR
  3504  0012  0AA0               	incf	_Bz,f
  3505  0013  1903               	skipnz
  3506  0014  0AA1               	incf	_Bz+1,f
  3507  0015  0874               	movf	??_ISR+1,w
  3508  0016  0223               	subwf	_Bz+3,w
  3509  0017  1D03               	skipz
  3510  0018  281B               	goto	u177_25
  3511  0019  0873               	movf	??_ISR,w
  3512  001A  0222               	subwf	_Bz+2,w
  3513  001B                     u177_25:	
  3514  001B  1C03               	skipc
  3515  001C  281F               	goto	i1l239
  3516                           
  3517                           ;Main.c: 383: PORTCbits.RC1=1;
  3518  001D  148E               	bsf	14,1	;volatile
  3519  001E  2820               	goto	i1l1814
  3520  001F                     i1l239:	
  3521                           
  3522                           ;Main.c: 384: else
  3523                           ;Main.c: 385: {
  3524                           ;Main.c: 386: PORTCbits.RC1=0;
  3525  001F  108E               	bcf	14,1	;volatile
  3526  0020                     i1l1814:	
  3527                           
  3528                           ;Main.c: 387: }
  3529                           ;Main.c: 388: if(Bz.LongCnt>=(Bz.Long+700))
  3530  0020  0822               	movf	_Bz+2,w
  3531  0021  3EBC               	addlw	188
  3532  0022  00F3               	movwf	??_ISR
  3533  0023  3002               	movlw	2
  3534  0024  3D23               	addwfc	_Bz+3,w
  3535  0025  00F4               	movwf	??_ISR+1
  3536  0026  0874               	movf	??_ISR+1,w
  3537  0027  0221               	subwf	_Bz+1,w
  3538  0028  1D03               	skipz
  3539  0029  282C               	goto	u178_25
  3540  002A  0873               	movf	??_ISR,w
  3541  002B  0220               	subwf	_Bz,w
  3542  002C                     u178_25:	
  3543  002C  1C03               	skipc
  3544  002D  283A               	goto	i1l1824
  3545                           
  3546                           ;Main.c: 389: {
  3547                           ;Main.c: 390: Bz.LongCnt=0;
  3548  002E  01A0               	clrf	_Bz
  3549  002F  01A1               	clrf	_Bz+1
  3550                           
  3551                           ;Main.c: 391: Bz.TimesCnt+=1;
  3552  0030  3001               	movlw	1
  3553  0031  00F3               	movwf	??_ISR
  3554  0032  0873               	movf	??_ISR,w
  3555  0033  07A4               	addwf	_Bz+4,f
  3556                           
  3557                           ;Main.c: 392: if(Bz.TimesCnt>=Bz.Times)
  3558  0034  0825               	movf	_Bz+5,w
  3559  0035  0224               	subwf	_Bz+4,w
  3560  0036  1C03               	skipc
  3561  0037  283A               	goto	i1l1824
  3562                           
  3563                           ;Main.c: 393: {
  3564                           ;Main.c: 394: Bz.BzSwitchFlg=0;
  3565  0038  1026               	bcf	_Bz+6,0
  3566                           
  3567                           ;Main.c: 395: PORTCbits.RC1=0;
  3568  0039  108E               	bcf	14,1	;volatile
  3569  003A                     i1l1824:	
  3570                           
  3571                           ;Main.c: 396: }
  3572                           ;Main.c: 397: }
  3573                           ;Main.c: 398: }
  3574                           ;Main.c: 399: IrRcv();
  3575  003A  21E4               	fcall	_IrRcv
  3576                           
  3577                           ;Main.c: 400: Ms10Cnt+=1;
  3578  003B  3001               	movlw	1
  3579  003C  00F3               	movwf	??_ISR
  3580  003D  0873               	movf	??_ISR,w
  3581  003E  0020               	movlb	0	; select bank0
  3582  003F  07B6               	addwf	_Ms10Cnt,f
  3583                           
  3584                           ;Main.c: 401: if(Ms10Cnt>=100)
  3585  0040  3064               	movlw	100
  3586  0041  0236               	subwf	_Ms10Cnt,w
  3587  0042  1C03               	skipc
  3588  0043  2846               	goto	i1l1834
  3589                           
  3590                           ;Main.c: 402: {
  3591                           ;Main.c: 403: Ms10Cnt=0;
  3592  0044  01B6               	clrf	_Ms10Cnt
  3593                           
  3594                           ;Main.c: 404: Ms10flag=1;
  3595  0045  16F0               	bsf	_Ms10flag/(0+8),_Ms10flag& (0+7)
  3596  0046                     i1l1834:	
  3597                           
  3598                           ;Main.c: 405: }
  3599                           ;Main.c: 406: INTCONbits.TMR0IF = 0;
  3600  0046  110B               	bcf	11,2	;volatile
  3601  0047                     i1l244:	
  3602  0047  0875               	movf	??_ISR+2,w
  3603  0048  00FF               	movwf	127
  3604  0049  0009               	retfie
  3605  004A                     __end_of_ISR:	
  3606                           
  3607                           	psect	text18
  3608  01E4                     __ptext18:	
  3609 ;; *************** function _IrRcv *****************
  3610 ;; Defined at:
  3611 ;;		line 22 in file "sur/IrReceive.c"
  3612 ;; Parameters:    Size  Location     Type
  3613 ;;		None
  3614 ;; Auto vars:     Size  Location     Type
  3615 ;;		None
  3616 ;; Return value:  Size  Location     Type
  3617 ;;		None               void
  3618 ;; Registers used:
  3619 ;;		wreg, status,2, status,0
  3620 ;; Tracked objects:
  3621 ;;		On entry : 0/0
  3622 ;;		On exit  : 0/0
  3623 ;;		Unchanged: 0/0
  3624 ;; Data sizes:     COMMON   BANK0   BANK1
  3625 ;;      Params:         0       0       0
  3626 ;;      Locals:         0       0       0
  3627 ;;      Temps:          1       0       0
  3628 ;;      Totals:         1       0       0
  3629 ;;Total ram usage:        1 bytes
  3630 ;; Hardware stack levels used:    1
  3631 ;; This function calls:
  3632 ;;		Nothing
  3633 ;; This function is called by:
  3634 ;;		_ISR
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           
  3639                           ;psect for function _IrRcv
  3640  01E4                     _IrRcv:	
  3641                           
  3642                           ;IrReceive.c: 24: if(RcvFlg==1) return;
  3643                           
  3644                           ;incstack = 0
  3645                           ; Regs used in _IrRcv: [wreg+status,2+status,0]
  3646  01E4  1BF0               	btfsc	_RcvFlg/(0+8),_RcvFlg& (0+7)
  3647  01E5  0008               	return
  3648                           
  3649                           ;IrReceive.c: 25: if(PORTCbits.RC2==1)
  3650  01E6  0020               	movlb	0	; select bank0
  3651  01E7  1D0E               	btfss	14,2	;volatile
  3652  01E8  29EF               	goto	i1l1366
  3653                           
  3654                           ;IrReceive.c: 26: {
  3655                           ;IrReceive.c: 27: Pcount.High+=1;
  3656  01E9  3001               	movlw	1
  3657  01EA  00F2               	movwf	??_IrRcv
  3658  01EB  0872               	movf	??_IrRcv,w
  3659  01EC  07AB               	addwf	_Pcount,f
  3660                           
  3661                           ;IrReceive.c: 28: PlowFlg=1;
  3662  01ED  1770               	bsf	_PlowFlg/(0+8),_PlowFlg& (0+7)
  3663                           
  3664                           ;IrReceive.c: 29: }
  3665  01EE  0008               	return
  3666  01EF                     i1l1366:	
  3667                           
  3668                           ;IrReceive.c: 30: else
  3669                           ;IrReceive.c: 31: {
  3670                           ;IrReceive.c: 32: Pcount.Low+=1;
  3671  01EF  3001               	movlw	1
  3672  01F0  00F2               	movwf	??_IrRcv
  3673  01F1  0872               	movf	??_IrRcv,w
  3674  01F2  07AC               	addwf	_Pcount+1,f
  3675                           
  3676                           ;IrReceive.c: 33: if(PlowFlg)
  3677  01F3  1F70               	btfss	_PlowFlg/(0+8),_PlowFlg& (0+7)
  3678  01F4  0008               	return
  3679                           
  3680                           ;IrReceive.c: 34: {
  3681                           ;IrReceive.c: 35: if(LeadFlg==0)
  3682  01F5  1A70               	btfsc	_LeadFlg/(0+8),_LeadFlg& (0+7)
  3683  01F6  2A12               	goto	i1l29
  3684                           
  3685                           ;IrReceive.c: 36: {
  3686                           ;IrReceive.c: 37: if((Pcount.Low>=28)&&(Pcount.Low<=40))
  3687  01F7  301C               	movlw	28
  3688  01F8  022C               	subwf	_Pcount+1,w
  3689  01F9  1C03               	skipc
  3690  01FA  2A63               	goto	i1l36
  3691  01FB  3029               	movlw	41
  3692  01FC  022C               	subwf	_Pcount+1,w
  3693  01FD  1803               	skipnc
  3694  01FE  2A63               	goto	i1l36
  3695                           
  3696                           ;IrReceive.c: 38: {
  3697                           ;IrReceive.c: 39: if((Pcount.High>=14)&&(Pcount.High<=20))
  3698  01FF  300E               	movlw	14
  3699  0200  022B               	subwf	_Pcount,w
  3700  0201  1C03               	skipc
  3701  0202  2A63               	goto	i1l36
  3702  0203  3015               	movlw	21
  3703  0204  022B               	subwf	_Pcount,w
  3704  0205  1803               	skipnc
  3705  0206  2A63               	goto	i1l36
  3706                           
  3707                           ;IrReceive.c: 40: {
  3708                           ;IrReceive.c: 41: LeadFlg=1;
  3709  0207  1670               	bsf	_LeadFlg/(0+8),_LeadFlg& (0+7)
  3710                           
  3711                           ;IrReceive.c: 42: IrData.Long=0;
  3712  0208  3000               	movlw	0
  3713  0209  00AA               	movwf	_IrData+3	;volatile
  3714  020A  3000               	movlw	0
  3715  020B  00A9               	movwf	_IrData+2	;volatile
  3716  020C  3000               	movlw	0
  3717  020D  00A8               	movwf	_IrData+1	;volatile
  3718  020E  3000               	movlw	0
  3719  020F  00A7               	movwf	_IrData	;volatile
  3720                           
  3721                           ;IrReceive.c: 43: RecvN=0;
  3722  0210  01B7               	clrf	_RecvN
  3723                           
  3724                           ;IrReceive.c: 44: }
  3725  0211  2A64               	goto	i1l34
  3726  0212                     i1l29:	
  3727                           ;IrReceive.c: 48: }
  3728                           
  3729                           ;IrReceive.c: 47: else LeadFlg=0;
  3730                           
  3731                           ;IrReceive.c: 46: }
  3732                           
  3733                           ;IrReceive.c: 45: else LeadFlg=0;
  3734                           
  3735                           
  3736                           ;IrReceive.c: 49: else if(LeadFlg==1)
  3737  0212  1E70               	btfss	_LeadFlg/(0+8),_LeadFlg& (0+7)
  3738  0213  2A64               	goto	i1l34
  3739                           
  3740                           ;IrReceive.c: 50: {
  3741                           ;IrReceive.c: 51: if((Pcount.Low>=3)&&(Pcount.Low<=6))
  3742  0214  3003               	movlw	3
  3743  0215  022C               	subwf	_Pcount+1,w
  3744  0216  1C03               	skipc
  3745  0217  2A63               	goto	i1l36
  3746  0218  3007               	movlw	7
  3747  0219  022C               	subwf	_Pcount+1,w
  3748  021A  1803               	skipnc
  3749  021B  2A63               	goto	i1l36
  3750                           
  3751                           ;IrReceive.c: 52: {
  3752                           ;IrReceive.c: 53: if((Pcount.High>=10)&&(Pcount.High<=15))
  3753  021C  300A               	movlw	10
  3754  021D  022B               	subwf	_Pcount,w
  3755  021E  1C03               	skipc
  3756  021F  2A2D               	goto	i1l1398
  3757  0220  3010               	movlw	16
  3758  0221  022B               	subwf	_Pcount,w
  3759  0222  1803               	skipnc
  3760  0223  2A2D               	goto	i1l1398
  3761                           
  3762                           ;IrReceive.c: 54: {
  3763                           ;IrReceive.c: 55: IrData.Long<<=1;
  3764  0224  3001               	movlw	1
  3765  0225                     u107_25:	
  3766  0225  35A7               	lslf	_IrData,f	;volatile
  3767  0226  0DA8               	rlf	_IrData+1,f	;volatile
  3768  0227  0DA9               	rlf	_IrData+2,f	;volatile
  3769  0228  0DAA               	rlf	_IrData+3,f	;volatile
  3770  0229  0B89               	decfsz	9,f
  3771  022A  2A25               	goto	u107_25
  3772                           
  3773                           ;IrReceive.c: 56: IrData.Long|=0x00000001;
  3774  022B  1427               	bsf	_IrData,0	;volatile
  3775  022C  2A44               	goto	i1l1406
  3776  022D                     i1l1398:	
  3777                           ;IrReceive.c: 58: }
  3778                           
  3779                           ;IrReceive.c: 57: RecvN+=1;
  3780                           
  3781                           
  3782                           ;IrReceive.c: 59: else if((Pcount.High>=3)&&(Pcount.High<=6))
  3783  022D  3003               	movlw	3
  3784  022E  022B               	subwf	_Pcount,w
  3785  022F  1C03               	skipc
  3786  0230  2A49               	goto	i1l39
  3787  0231  3007               	movlw	7
  3788  0232  022B               	subwf	_Pcount,w
  3789  0233  1803               	skipnc
  3790  0234  2A49               	goto	i1l39
  3791                           
  3792                           ;IrReceive.c: 60: {
  3793                           ;IrReceive.c: 61: IrData.Long<<=1;
  3794  0235  3001               	movlw	1
  3795  0236                     u110_25:	
  3796  0236  35A7               	lslf	_IrData,f	;volatile
  3797  0237  0DA8               	rlf	_IrData+1,f	;volatile
  3798  0238  0DA9               	rlf	_IrData+2,f	;volatile
  3799  0239  0DAA               	rlf	_IrData+3,f	;volatile
  3800  023A  0B89               	decfsz	9,f
  3801  023B  2A36               	goto	u110_25
  3802                           
  3803                           ;IrReceive.c: 62: IrData.Long&=0xfffffffe;
  3804  023C  30FE               	movlw	254
  3805  023D  05A7               	andwf	_IrData,f	;volatile
  3806  023E  30FF               	movlw	255
  3807  023F  05A8               	andwf	_IrData+1,f	;volatile
  3808  0240  30FF               	movlw	255
  3809  0241  05A9               	andwf	_IrData+2,f	;volatile
  3810  0242  30FF               	movlw	255
  3811  0243  05AA               	andwf	_IrData+3,f	;volatile
  3812  0244                     i1l1406:	
  3813                           
  3814                           ;IrReceive.c: 63: RecvN+=1;
  3815  0244  3001               	movlw	1
  3816  0245  00F2               	movwf	??_IrRcv
  3817  0246  0872               	movf	??_IrRcv,w
  3818  0247  07B7               	addwf	_RecvN,f
  3819                           
  3820                           ;IrReceive.c: 64: }
  3821  0248  2A4A               	goto	i1l1408
  3822  0249                     i1l39:	
  3823                           
  3824                           ;IrReceive.c: 65: else LeadFlg=0;
  3825  0249  1270               	bcf	_LeadFlg/(0+8),_LeadFlg& (0+7)
  3826  024A                     i1l1408:	
  3827                           
  3828                           ;IrReceive.c: 66: if(RecvN==16 && IrData.Long!=0xAE48) LeadFlg=0;
  3829  024A  0837               	movf	_RecvN,w
  3830  024B  3A10               	xorlw	16
  3831  024C  1D03               	skipz
  3832  024D  2A5E               	goto	i1l1414
  3833  024E  3000               	movlw	0
  3834  024F  062A               	xorwf	_IrData+3,w	;volatile
  3835  0250  1D03               	skipz
  3836  0251  2A5C               	goto	u112_25
  3837  0252  3000               	movlw	0
  3838  0253  0629               	xorwf	_IrData+2,w	;volatile
  3839  0254  1D03               	skipz
  3840  0255  2A5C               	goto	u112_25
  3841  0256  30AE               	movlw	174
  3842  0257  0628               	xorwf	_IrData+1,w	;volatile
  3843  0258  1D03               	skipz
  3844  0259  2A5C               	goto	u112_25
  3845  025A  3048               	movlw	72
  3846  025B  0627               	xorwf	_IrData,w	;volatile
  3847  025C                     u112_25:	
  3848  025C  1D03               	btfss	3,2
  3849  025D  2A63               	goto	i1l36
  3850  025E                     i1l1414:	
  3851                           
  3852                           ;IrReceive.c: 67: else if(RecvN==48)
  3853  025E  0837               	movf	_RecvN,w
  3854  025F  3A30               	xorlw	48
  3855  0260  1D03               	skipz
  3856  0261  2A64               	goto	i1l34
  3857                           
  3858                           ;IrReceive.c: 68: {RcvFlg=1;LeadFlg=0;}
  3859  0262  17F0               	bsf	_RcvFlg/(0+8),_RcvFlg& (0+7)
  3860  0263                     i1l36:	
  3861                           ;IrReceive.c: 69: }
  3862                           
  3863                           
  3864                           ;IrReceive.c: 70: else LeadFlg=0;
  3865  0263  1270               	bcf	_LeadFlg/(0+8),_LeadFlg& (0+7)
  3866  0264                     i1l34:	
  3867                           
  3868                           ;IrReceive.c: 71: }
  3869                           ;IrReceive.c: 72: PlowFlg=0;
  3870  0264  1370               	bcf	_PlowFlg/(0+8),_PlowFlg& (0+7)
  3871                           
  3872                           ;IrReceive.c: 73: Pcount.High=0;
  3873  0265  01AB               	clrf	_Pcount
  3874                           
  3875                           ;IrReceive.c: 74: Pcount.Low=0;
  3876  0266  01AC               	clrf	_Pcount+1
  3877  0267  0008               	return
  3878  0268                     __end_of_IrRcv:	
  3879  007E                     btemp	set	126	;btemp
  3880  007E                     wtemp	set	126
  3881  007E                     wtemp0	set	126
  3882  0080                     wtemp1	set	128
  3883  0082                     wtemp2	set	130
  3884  0084                     wtemp3	set	132
  3885  0086                     wtemp4	set	134
  3886  0088                     wtemp5	set	136
  3887  007F                     wtemp6	set	127
  3888  007E                     ttemp	set	126
  3889  007E                     ttemp0	set	126
  3890  0081                     ttemp1	set	129
  3891  0084                     ttemp2	set	132
  3892  0087                     ttemp3	set	135
  3893  007F                     ttemp4	set	127
  3894  007E                     ltemp	set	126
  3895  007E                     ltemp0	set	126
  3896  0082                     ltemp1	set	130
  3897  0086                     ltemp2	set	134
  3898  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     18      45
    BANK1            32      0       0

Pointer List with Targets:

    flash_memory_write@data	PTR unsigned char  size(1) Largest target is 2
		 -> Addr(BANK0[2]), SaveDataToFlash@AddrTemp(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_CheckIr
    _TimeBase->_GetIrAN
    _TimeBase->___wmul
    ___awdiv->___wmul
    _IrDeal->_BzSet
    _IrDeal->___wmul
    _SaveDataToFlash->_flash_memory_erase
    _SaveDataToFlash->_flash_memory_read
    _SaveDataToFlash->_flash_memory_write
    _InitPowerOn->___wmul
    _WritePwmPercentage->___wmul
    _ReadDataFromFlash->_flash_memory_read

Critical Paths under _ISR in COMMON

    _ISR->_IrRcv

Critical Paths under _main in BANK0

    _main->_TimeBase
    _TimeBase->___awdiv
    ___awdiv->___wmul
    _IrDeal->_SaveDataToFlash
    _IrDeal->_WritePwmPercentage
    _SaveDataToFlash->_flash_memory_write
    _InitPowerOn->_WritePwmPercentage
    _WritePwmPercentage->___wmul
    _ReadDataFromFlash->_flash_memory_read

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8333
                            _CheckIr
                              _Delay
                        _InitPowerOn
                         _Initialize
                             _IrDeal
                           _TimeBase
 ---------------------------------------------------------------------------------
 (1) _TimeBase                                             5     5      0    2907
                                             13 BANK0      5     5      0
                            _GetIrAN
                    _SaveDataToFlash
                 _WritePwmPercentage
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     556
                                              4 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _GetIrAN                                              2     2      0      25
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _IrDeal                                               2     2      0    3575
                                              9 BANK0      2     2      0
                              _BzSet
                  _ReadDataFromFlash
                    _SaveDataToFlash
                 _WritePwmPercentage
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     906
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _SaveDataToFlash                                      3     3      0     877
                                              6 BANK0      3     3      0
                 _flash_memory_erase
                  _flash_memory_read
                 _flash_memory_write
 ---------------------------------------------------------------------------------
 (3) _flash_memory_write                                   8     6      2     540
                                              4 COMMON     2     0      2
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) _flash_memory_erase                                   5     5      0      99
                                              4 COMMON     2     2      0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _BzSet                                                4     2      2     986
                                              4 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitPowerOn                                          2     2      0    1712
                                              9 BANK0      2     2      0
                  _ReadDataFromFlash
                 _WritePwmPercentage
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _WritePwmPercentage                                   5     3      2     543
                                              4 BANK0      5     3      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _ReadDataFromFlash                                    2     2      0     263
                                              3 BANK0      2     2      0
                  _flash_memory_read
 ---------------------------------------------------------------------------------
 (3) _flash_memory_read                                    5     5      0      99
                                              4 COMMON     2     2      0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Delay                                                8     4      4     139
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _CheckIr                                              2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  3     3      0       0
                                              1 COMMON     3     3      0
                              _IrRcv
 ---------------------------------------------------------------------------------
 (5) _IrRcv                                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckIr
   _Delay
   _InitPowerOn
     _ReadDataFromFlash
       _flash_memory_read
     _WritePwmPercentage
       ___wmul (ARG)
     ___wmul
   _Initialize
   _IrDeal
     _BzSet
     _ReadDataFromFlash
       _flash_memory_read
     _SaveDataToFlash
       _flash_memory_erase
       _flash_memory_read
       _flash_memory_write
     _WritePwmPercentage
       ___wmul (ARG)
     ___wmul
   _TimeBase
     _GetIrAN
     _SaveDataToFlash
       _flash_memory_erase
       _flash_memory_read
       _flash_memory_write
     _WritePwmPercentage
       ___wmul (ARG)
     ___awdiv
       ___wmul (ARG)
     ___wmul

 _ISR (ROOT)
   _IrRcv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       2       1       14.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      37       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     12      2D       6       56.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      37       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Tue Jul 08 08:47:09 2014

                 __CFG_CP$OFF 0000                            l20 0516                            _Bz 0020  
                ___awdiv@sign 0045           ___wmul@multiplicand 003D                           l200 00CE  
                         l135 0525                           l158 04C9                           l192 0115  
                         l177 0404                           l265 0275                           l187 0131  
                         l295 0355                           l297 037B                           l654 04D4  
                         _CCT 0381                           _PR2 001B                           _ISR 0004  
                __CFG_BORV$LO 0000                           wreg 0009                  __CFG_LVP$OFF 0000  
                        ?_ISR 0072                          l2004 00FA                          l2030 03A2  
                        l2006 011C                          l2018 03EF                          l2034 03A9  
                        l2036 03AD                          l2142 04CD                          l1354 0517  
                        l1610 02C8                          l1602 0290                          l1606 02AC  
                        l1624 04BC                          l1930 006F                          l1762 02FA  
                        l1906 019E                          l1940 008B                          l1924 0060  
                        l1780 0320                          l1772 0302                          l1756 02EF  
                        l1908 01A1                          l1934 007B                          l1774 030E  
                        l1918 01CD                          l1864 046B                          l1960 00B3  
                        l1952 00A5                          l1944 0097                          l1784 0329  
                        l1980 00D9                          l1788 0331                          l1892 015F  
                        l1968 00C1                          l1986 00E2                          l1996 00F1  
                        u2100 039E                          u2020 011A                          u2102 039F  
                        u2090 0398                          u1435 0288                          u2092 0399  
                        u1455 02A4                          u2175 04D5                          u2185 04DA  
                        u1475 02C0                          u1645 0305                          u1910 0192  
                        u1495 02DC                          u1665 030F                          u1930 019C  
                        u1835 048A                          u1675 0319                          u1924 0194  
                        u1685 0321                          u1875 0151                          i1l34 0264  
                        i1l36 0263                          i1l29 0212                          i1l39 0249  
                        _TMR0 0015                          _Addr 0039                          _WPUA 020C  
                        _IrAn 0035                          _main 0519                          fsr0h 0005  
                        fsr1h 0007                          fsr0l 0004                          indf0 0000  
                        indf1 0001                          fsr1l 0006                          btemp 007E  
                        ltemp 007E                          start 004A                          ttemp 007E  
             __end_of_CheckIr 0519                          wtemp 007E               __end_of_GetIrAN 04CB  
               __CFG_MCLRE$ON 0000                 ??_InitPowerOn 0044                         ??_ISR 0073  
                  _DimmingNum 0078                         ?_main 0072               __end_of___awdiv 0338  
             ___awdiv@divisor 003F                         _T2CON 001C                         i1l244 0047  
                       _S1Cnt 0038                         i1l239 001F               ___awdiv@counter 0044  
                       _PORTA 000C                         _PORTC 000E                         _TRISA 008C  
                       _TRISC 008E                         _Delay 0464                         _BzSet 052D  
                       _IrRcv 01E4                 __CFG_PWRTE$ON 0000                 __CFG_WRT$BOOT 0000  
                       _RecvN 0037             ??_SaveDataToFlash 0041                __pbitbssCOMMON 0380  
              __CFG_BOREN$OFF 0000                         ltemp0 007E                         ltemp1 0082  
                       ltemp2 0086                         ltemp3 0080                         ttemp0 007E  
                       ttemp1 0081                         ttemp2 0084                         ttemp3 0087  
                       ttemp4 007F                         status 0003                         wtemp0 007E  
                       wtemp1 0080                         wtemp2 0082                         wtemp3 0084  
                       wtemp4 0086                         wtemp5 0088                         wtemp6 007F  
             __initialization 004B                  __end_of_main 052D     flash_memory_erase@AddrBuf 003C  
                  _Initialize 043A                __CFG_LPBOR$OFF 0000                        ??_main 0078  
         __end_of_InitPowerOn 0502              __end_of_TimeBase 01E4            _flash_memory_erase 040C  
                      ?_Delay 003B                        ?_BzSet 0076                        ?_IrRcv 0072  
                 _DimmingBack 0033            _flash_memory_write 0338              ___awdiv@dividend 0041  
                      _ANSELA 018C                        _ANSELC 018E           ?_flash_memory_erase 0072  
                      u110_25 0236                     ??_CheckIr 0076                        i1l1414 025E  
                      i1l1406 0244                        i1l1408 024A                        u112_25 025C  
                      i1l1366 01EF                        i1l1398 022D                        i1l1814 0020  
                      i1l1824 003A                        i1l1834 0046                        u107_25 0225  
                      _PMADRH 0192                        _PMADRL 0191                        u177_25 001B  
                      _PMDATH 0194                        u178_25 002C                        _PMDATL 0193  
                      _PMCON2 0196                     ??_GetIrAN 0076           ?_flash_memory_write 0076  
                      _OSCCON 0099                        _WDTCON 0097                        _IrDeal 0058  
                      _IrData 0027                        _RcvFlg 0387                        _Pcount 002B  
                      ___wmul 04CB                     ??___awdiv 0043          ??_flash_memory_erase 0076  
        ??_flash_memory_write 003B              ___awdiv@quotient 0046    __end_of_WritePwmPercentage 02E4  
                __pdataCOMMON 0079       __end_of__initialization 0056                 __end_of_Delay 048E  
               __end_of_BzSet 053E                 __end_of_IrRcv 0268                __pcstackCOMMON 0072  
                 _InitPowerOn 04E9                   ?_Initialize 0072                _OPTION_REGbits 0095  
                     ??_Delay 003F                       ??_BzSet 003B                       ??_IrRcv 0072  
                  __pbssBANK0 0020                       ?_IrDeal 0072                     ?_TimeBase 0072  
                  __pmaintext 0519                       ?___wmul 003B                    __pintentry 0004  
             _SaveDataToFlash 038A                       _PWM1DCH 0612                       _PWM1DCL 0611  
                     _PWM2DCH 0615                       _PWM2DCL 0614                       _PWM3DCH 0618  
                     _PWM3DCL 0617                       _PWM4DCH 061B                       _PWM4DCL 061A  
                     _PWM2CON 0616                       _Ms10Cnt 0036                       _CheckIr 0502  
                     _GetIrAN 04AD           __size_of_Initialize 002A                       _LeadFlg 0384  
             __size_of_IrDeal 00DA                    ??_TimeBase 0048                       _PlowFlg 0386  
            _DimmingNumBackup 0034  WritePwmPercentage@Percentage 003F                       ___awdiv 02E4  
             __size_of___wmul 001E               __CFG_STVREN$OFF 0000                       __ptext1 0132  
                     __ptext2 02E4                       __ptext3 04AD                       __ptext4 0058  
                     __ptext5 04CB                       __ptext6 038A                       __ptext7 0338  
                     __ptext8 040C                       __ptext9 052D                  __size_of_ISR 0046  
                   Delay@Time 003B                       clrloop0 053F          end_of_initialization 0056  
      flash_memory_erase@Page 003B                     GetIrAN@AN 0077                     BzSet@Long 0076  
     __end_of_SaveDataToFlash 03D8              _ColorTemperature 0382                     _PORTAbits 000C  
                   _PORTCbits 000E              __CFG_FOSC$INTOSC 0000     flash_memory_write@AddrBuf 003F  
   ReadDataFromFlash@AddrTemp 003F            _WritePwmPercentage 0268           ?_WritePwmPercentage 003F  
              __end_of_IrDeal 0132                  ?_InitPowerOn 0072     flash_memory_write@address 003D  
   flash_memory_write@datalen 0077                  ??_Initialize 0076   __size_of_flash_memory_erase 002E  
              __end_of___wmul 04E9                 __pidataCOMMON 0544   __size_of_flash_memory_write 0052  
        ??_WritePwmPercentage 0041           start_initialization 004B                   __end_of_ISR 004A  
           _flash_memory_read 048E            __end_of_Initialize 0464          _ColorTemperatureBack 0383  
          ?_flash_memory_read 0072                      ??_IrDeal 0044              ?_SaveDataToFlash 0072  
         ??_flash_memory_read 0076                      ??___wmul 0076             __size_of_TimeBase 00B2  
                   _TimingCnt 002D                     _TimingNum 002F        flash_memory_write@data 0076  
                 __pbssCOMMON 0078                     ___latbits 0000             _ReadDataFromFlash 03D8  
               __pcstackBANK0 003B            ?_ReadDataFromFlash 0072     __end_of_flash_memory_read 04AD  
                    ?_CheckIr 0072                      ?_GetIrAN 0072           ??_ReadDataFromFlash 003E  
        WritePwmPercentage@AN 0043                      ?___awdiv 003F     __end_of_ReadDataFromFlash 040C  
              __size_of_Delay 002A                __size_of_BzSet 0011                __size_of_IrRcv 0084  
            __CFG_WDTE$SWDTEN 0000                      _CCTLevel 0079                ___wmul@product 0076  
                   clear_ram0 053E          __size_of_InitPowerOn 0019                      _Ms10flag 0385  
           ___wmul@multiplier 003B    __size_of_flash_memory_read 001F              __size_of_CheckIr 0017  
            __size_of_GetIrAN 001E                      _TimeBase 0132                      _TimeFlag 0388  
                 GetIrAN@cnt1 0031                   GetIrAN@cnt2 0032                   IrDeal@Night 0380  
       flash_memory_write@wdi 003E              __size_of___awdiv 0054    __size_of_ReadDataFromFlash 0034  
                    __ptext10 043A                      __ptext11 04E9                      __ptext12 0268  
                    __ptext13 03D8                      __ptext14 048E                      __ptext15 0464  
                    __ptext16 0502                      __ptext18 01E4                 __size_of_main 0014  
  __end_of_flash_memory_erase 043A      flash_memory_read@AddrBuf 003C    __end_of_flash_memory_write 038A  
                  _INTCONbits 000B   __size_of_WritePwmPercentage 007C      flash_memory_read@address 003B  
                    intlevel1 0000       SaveDataToFlash@AddrTemp 0043                    _PMCON1bits 0195  
                  BzSet@Times 003C             __CFG_CLKOUTEN$OFF 0000      __size_of_SaveDataToFlash 004E  
